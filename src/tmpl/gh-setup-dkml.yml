# setup-dkml. Short form: sd4
name: setup-dkml

env:
  # autogen from global_env_vars.{% for var in global_env_vars %}{{ nl }}  {{ var.name }}: {{ squot }}{{ var.value }}{{ squot }}{% endfor %}

on:
  workflow_call:
    outputs:
      import_func:
        description: |
          A shell script that can be eval'd or executed inline in a POSIX shell, that defines
          a shell function 'import'. When 'import HOST_TARGET_ABIS' is called a `opamrun`
          command will be available to subsequent GitHub Action steps.
        value: |
          import() {
            import_HOST_TARGET_ABIS=$1
            shift

            case "$import_HOST_TARGET_ABIS" in
              win32*)         import_OPAMROOT="D:/.opam" ;;
              macos*)         import_OPAMROOT="/Users/runner/.opam" ;;
              manylinux2014*) import_OPAMROOT=".ci/opamroot" ;;
              *)
                printf "FATAL: Unsupported abi: %s\n" "$import_HOST_TARGET_ABIS" >&2
                exit 109
                ;;
            esac

            ls -R .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS} >&2

            install -d "$import_OPAMROOT"
            tar xCfz "$import_OPAMROOT" .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/opamroot.tar.gz

            install -d .ci/sd4/g
            tar xCfz .ci/sd4/g .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/sources.tar.gz

            # Extract Opam executable and scripts
            tar xvf .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/env-opam.tar

            # Expose opamrun to remaining GitHub Action steps
            opamrunabs="$GITHUB_WORKSPACE/.ci/sd4/opamrun"
            if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
            echo "$opamrunabs" >> $GITHUB_PATH
            #   Special case: GITHUB_PATH does not influence msys2.CMD of msys2/setup-msys2@v2, so place in real MSYS2 PATH
            if [ -n "${MSYSTEM:-}" ]; then
              install -d /usr/local/bin
              install -v .ci/sd4/opamrun/opamrun /usr/local/bin/opamrun
              # Also get rid of link.exe; it interferes with MSVC's link.exe
              mv -v /usr/bin/link.exe /usr/bin/link.gnu.exe
            fi
          }

    # WARNING: The inputs.*.default seem to do nothing!
    inputs:
      FDOPEN_OPAMEXE_BOOTSTRAP:
        type: boolean
        description: "Use opam.exe from fdopen on Windows. Typically only used when bootstrapping Opam for the first time. May be needed to solve '\"create_process\" failed on sleep: Bad file descriptor' which may need https://github.com/ocaml/opam/commit/417b97d8cfada35682a0f4107eb2e4f9e24fba91"
        required: false
        default: false
      CACHE_PREFIX:
        type: string
        description: The prefix of the cache keys.
        required: false
        default: "v1"
      OCAML_COMPILER:
        type: string
        description: "The version of the OCaml compiler, as tagged by the https://github.com/diskuv/dkml-base-compiler repository. If not specified the latest compiler, or the version associated with the 'dkml-compiler' input, is used. Currently only 4.12.1 is supported"
        required: false
      DKML_COMPILER:
        type: string
        description: "Git branch, tag or commit for dkml-compiler. However if OCAML_COMPILER is specified the 'dkml-base-compiler' version is taken from OCAML_COMPILER."
        required: false
        default: "" # "@repository@" = Opam ; "" = latest from default branch of git clone
      CONF_DKML_CROSS_TOOLCHAIN:
        type: string
        description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
        required: false
        default: "@repository@" # "@repository@" = Opam ; "" = latest from default branch of git clone
      DISKUV_OPAM_REPOSITORY:
        type: string
        description: "Git branch, tag or commit for diskuv-opam-repository"
        required: false
        default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG is used as default for empty strings
      VERBOSE:
        type: boolean
        required: false
        default: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # autogen from gh_matrix. {% for outer in gh_matrix %}{{ nl }}          - {% for var in outer.vars %}{{ var.name }}: {{ squot }}{{ var.value }}{{ squot }}{{ nl }}            {% endfor %}{% endfor %}

    runs-on: "{% raw -%}${{ matrix.gh_os }}{%- endraw %}"
    name: "{% raw -%}${{ matrix.abi_pattern }} ${{ matrix.comment }}{%- endraw %}"

    defaults:
      run:
        shell: "{% raw -%}${{ matrix.default_shell }}{%- endraw %}"

    env:
      # Push down matrix variables for GitHub/GitLab portable scripts
      opam_root:                "{% raw -%}${{ matrix.opam_root }}{%- endraw %}"
      exe_ext:                  "{% raw -%}${{ matrix.exe_ext }}{%- endraw %}"
      bootstrap_opam_version:   "{% raw -%}${{ matrix.bootstrap_opam_version }}{%- endraw %}"
      abi_pattern:              "{% raw -%}${{ matrix.abi_pattern }}{%- endraw %}"
      dkml_host_abi:            "{% raw -%}${{ matrix.dkml_host_abi }}{%- endraw %}"
      dockcross_image:          "{% raw -%}${{ matrix.dockcross_image }}{%- endraw %}"
      #   GitHub Actions uses Docker Buildx, so use custom 'dkml-dockcross/*' cached image which speeds up builds
      dockcross_image_custom_prefix:  "dkml-"
      dockcross_run_extra_args: "{% raw -%}${{ matrix.dockcross_run_extra_args }}{%- endraw %}"
      docker_runner:            "{% raw -%}${{ matrix.docker_runner }}{%- endraw %}"
      in_docker:                "{% raw -%}${{ matrix.in_docker }}{%- endraw %}"
      vsstudio_dir:             "{% raw -%}${{ matrix.vsstudio_dir }}{%- endraw %}"
      vsstudio_vcvarsver:       "{% raw -%}${{ matrix.vsstudio_vcvarsver }}{%- endraw %}"
      vsstudio_winsdkver:       "{% raw -%}${{ matrix.vsstudio_winsdkver }}{%- endraw %}"
      vsstudio_msvspreference:  "{% raw -%}${{ matrix.vsstudio_msvspreference }}{%- endraw %}"
      vsstudio_cmakegenerator:  "{% raw -%}${{ matrix.vsstudio_cmakegenerator }}{%- endraw %}"
      vsstudio_hostarch:        "{% raw -%}${{ matrix.vsstudio_hostarch }}{%- endraw %}" 
      vsstudio_arch:            "{% raw -%}${{ matrix.vsstudio_arch }}{%- endraw %}"


      # Push down inputs variables for GitHub/GitLab portable scripts
      #   When non-empty, instead of building the standard components from the
      #   central Opam repository, use the github/gitlab development repositories
      #   directly.
      FDOPEN_OPAMEXE_BOOTSTRAP:         "{% raw -%}${{ inputs.FDOPEN_OPAMEXE_BOOTSTRAP }}{%- endraw %}"
      CONF_DKML_CROSS_TOOLCHAIN:        "{% raw -%}${{ inputs.CONF_DKML_CROSS_TOOLCHAIN }}{%- endraw %}"
      DISKUV_OPAM_REPOSITORY:           "{% raw -%}${{ inputs.DISKUV_OPAM_REPOSITORY }}{%- endraw %}"
      OCAML_COMPILER:                   "{% raw -%}${{ inputs.OCAML_COMPILER }}{%- endraw %}"
      VERBOSE:                          "{% raw -%}${{ inputs.VERBOSE }}{%- endraw %}"
    steps:
      - name: Install MSYS2 (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: "{% raw -%}${{ matrix.msys2_system }}{%- endraw %}"
          update: true
          install: >-
            {% raw -%}${{ matrix.msys2_packages }}{%- endraw %}
            {%- for var in required_msys2_packages %}
            {{ var }}{% endfor %}

      - name: Uninstall MSYS2 conflicting executables (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        # link.exe interferes with MSVC's link.exe
        run: rm -vf /usr/bin/link.exe

      - name: Write POSIX shell and AWK scripts
        run: |
          cat > common-values.sh <<'end_of_script'
          {{ gh_common_values_script }}
          end_of_script

          cat > run-checkout-code.sh <<'end_of_script'
          {{ gh_checkout_code_script }}
          end_of_script

          cat > run-setup-dkml.sh <<'end_of_script'
          {{ gh_setup_dkml_script }}
          end_of_script

          install -d .ci/sd4

          cat > .ci/sd4/msvcenv.awk <<'end_of_script'
          {{ gh_msvcenv_awk }}
          end_of_script

          cat > .ci/sd4/msvcpath.awk <<'end_of_script'
          {{ gh_msvcpath_awk }}
          end_of_script

      - name: Write PowerShell and Batch scripts
        if: startsWith(matrix.dkml_host_abi, 'windows')
        shell: pwsh
        run: |
          $Content = @'
          {{ gh_config_vsstudio_ps1 }}
          '@
          Set-Content -Path "config-vsstudio.ps1" -Encoding Unicode -Value $Content

          $Content = @'
          {{ gh_get_msvcpath_cmd }}

          REM * We can't use `msys2 -c` directly to query for all MSVC environment variables
          REM   because it stomps over the PATH. So we are inside a Batch script to do the query.
          msys2 -c "set | grep -v '^PATH=' | awk -f .ci/sd4/msvcenv.awk > .ci/sd4/msvcenv"

          REM (For some reason no shell commands can happen after the last msys2 -c in GitHub Actions
          REM so split into multiple steps!
          '@
          Set-Content -Path "get-msvcpath-into-msys2.cmd" -Encoding Default -Value $Content

      - name: Prepare cache keys
        # An undocumented bug with GitHub Actions is that a space in the key
        # will "succeed" but it never gets restored. So we will hash a
        # user-friendly file instead.
        run: |
          set -x
          echo '{{ gh_cachekey_opambin }}' > cachekey.opam.binaries
          echo '{{ gh_cachekey_vsstudio }}' > cachekey.vsstudio
          echo '{{ gh_cachekey_ci_inputs }}' > cachekey.ci.inputs

      # Bootstrapping Opam

      - name: Cache Opam bootstrap by OS
        uses: actions/cache@v3
        id: cache-sd4-bs
        with:
          path: .ci/sd4/bs
          key:
            "{% raw -%}${{ inputs.CACHE_PREFIX }}_${{ runner.os }}-sd4-bs-${{ hashFiles('cachekey.opam.binaries') }}{%- endraw %}"

      # ------
      # BEGIN Docker (ManyLinux)
      #   We use buildx which can cache into GitHub Actions Cache (type=gha)

      - name: Set up Docker Buildx (ManyLinux)
        if: matrix.dockcross_image != ''
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker (ManyLinux)
        if: matrix.dockcross_image != ''
        run: |
          install -d .ci/sd4/dockcross-ctx
          printf 'FROM %s\nRUN echo done fetching image' '{% raw -%}${{ matrix.dockcross_image }}{%- endraw %}' > .ci/sd4/dockcross-ctx/Dockerfile

      - name: Fetch dockcross image (ManyLinux)
        if: matrix.dockcross_image != ''
        uses: docker/build-push-action@v3
        with:
          context: .ci/sd4/dockcross-ctx
          builder: "{% raw -%}${{ steps.buildx.outputs.name }}{%- endraw %}"
          load: true
          tags: dkml-{% raw -%}${{ matrix.dockcross_image }}{%- endraw %}
          cache-from: type=gha,scope={% raw -%}${{ github.workflow }}{%- endraw %}
          cache-to: type=gha,mode=max,scope={% raw -%}${{ github.workflow }}{%- endraw %}

      # END Docker (ManyLinux)
      # ------

      - name: Cache Opam root by (host,target)
        uses: actions/cache@v3
        id: cache-sd4-opamroot
        with:
          path: |
            {% raw -%}${{ matrix.opam_root }}{%- endraw %}/config
            {% raw -%}${{ matrix.opam_root }}{%- endraw %}/dkml
            {% raw -%}${{ matrix.opam_root }}{%- endraw %}/repo
            {% raw -%}${{ matrix.opam_root }}{%- endraw %}/download-cache
            {% raw -%}${{ matrix.opam_root }}{%- endraw %}/.ci.root-init
            {% raw -%}${{ matrix.opam_root }}{%- endraw %}/.ci.repo-init
          key:
            c2_{% raw -%}${{ inputs.CACHE_PREFIX }}_${{ env.DKML_VERSION }}_${{ matrix.abi_pattern }}-sd4-opamroot-${{ hashFiles('cachekey.opam.binaries') }}-${{ hashFiles('cachekey.ci.inputs') }}{%- endraw %}

      # The action/checkout steps used for pinning will re-use existing Git objects
      # because of caching
      - name: Cache Git checkouts of Opam pins by OS
        uses: actions/cache@v3
        id: cache-sd4-git
        with:
          path: .ci/sd4/g
          key:
            "{% raw -%}${{ inputs.CACHE_PREFIX }}_${{ runner.os }}-sd4-git-${{ hashFiles('cachekey.ci.inputs') }}{%- endraw %}"

      # Checkout code

      - name: Checkout code
        run: 'sh run-checkout-code.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"'

      # Setup C compiler

      - name: Cache Visual Studio environment variables by (host,target)
        uses: actions/cache@v3
        if: startsWith(matrix.dkml_host_abi, 'windows')
        id: cache-sd4-vsenv
        with:
          path: .ci/sd4/vsenv.github
          key: "{% raw -%}${{ inputs.CACHE_PREFIX }}_sd4-vsenv-${{ hashFiles('cachekey.vsstudio') }}{%- endraw %}"

      - name: Configure Visual Studio (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        shell: pwsh
        run: |
          .\config-vsstudio.ps1

      - name: Export Visual Studio location and type (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        shell: pwsh
        run: |
          Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv.github
          Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv.github >> $env:GITHUB_ENV

      - name: Capture Visual Studio compiler environment (1/2) (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        shell: cmd
        run: |
          call get-msvcpath-into-msys2.cmd

      - name: Capture Visual Studio compiler environment (2/2) (Windows)
        if: startsWith(matrix.dkml_host_abi, 'windows')
        run: |
          #!/bin/sh
          set -euf
          cat .ci/sd4/msvcpath | tr -d '\r' | cygpath --path -f - | awk -f .ci/sd4/msvcpath.awk >> .ci/sd4/msvcenv

          tail -n100 .ci/sd4/msvcpath .ci/sd4/msvcenv >&2

      - name: Setup DKML
        run: 'sh run-setup-dkml.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"'

      # Bundle

      #   During cache read (the "Cache Opam root by (host,target)" step) we get:
      #      Cache Size: ~212 MB (222698916 B)
      #      C:\Windows\System32\tar.exe -z -xf D:/a/_temp/9b656ed6-e727-4499-b4f8-b34d5979d42b/cache.tgz -P -C D:/a/dkml-workflows-regular-example/dkml-workflows-regular-example
      #      ../../.opam/download-cache/md5/65/65e6dc9b305ccbed1267275fe180f538: Can't create '\\\\?\\D:\\a\\dkml-workflows-regular-example\\dkml-workflows-regular-example\\..\\..\\.opam\\download-cache\\md5\\65\\65e6dc9b305ccbed1267275fe180f538'
      #      ../../.opam/download-cache/md5/63/63b2ecad76cf56102074f3203fc8c0be: Can't create '\\\\?\\D:\\a\\dkml-workflows-regular-example\\dkml-workflows-regular-example\\..\\..\\.opam\\download-cache\\md5\\63\\63b2ecad76cf56102074f3203fc8c0be'
      #      tar.exe: Error exit delayed from previous errors.
      #      Warning: Failed to restore: Tar failed with error: The process 'C:\Windows\System32\tar.exe' failed with exit code 1
      #      Cache not found for input keys: v1_win32-windows_x86-sd4-opamroot-f674af417c46862703911bc9aee57c19d6c436776c657533610dc233fae8e8af-5850674459249f5d9ea150785baa5177201737ce2c7d59834aa7457c06c929e7
      #   So get rid of Opam's md5 download cache.
      - name: Remove problematic files from Opam download cache
        if: startsWith(matrix.dkml_host_abi, 'windows')
        run: |
          set -x
          rm -rf '{% raw -%}${{ matrix.opam_root }}{%- endraw %}/download-cache/md5'

      - name: Distribute source code, Opam environment, and Opam root
        run: |
          #!/bin/sh
          set -eufx

          create_tar() {
            create_tar_DIR=$1
            shift
            create_tar_FILE=$1
            shift
            case "{% raw -%}${{ matrix.dkml_host_abi }}{%- endraw %}" in
              linux_*|windows_*)
                # GNU tar (Windows uses MSYS2 GNU tar) has the [-H format] option
                # where the [posix] format will store fractional second precision, which
                # is needed by Opam to see if any files have been modified.
                # Confer: https://unix.stackexchange.com/questions/397130/tar-how-to-preserve-timestamps-down-to-more-than-a-second-of-precision
                # and: https://www.freebsd.org/cgi/man.cgi?tar(5)
                tar cCfHz "$create_tar_DIR" "$create_tar_FILE" posix "$@"
                ;;
              *)
                tar cCfz "$create_tar_DIR" "$create_tar_FILE" "$@"
            esac
          }

          create_tar $opam_root .ci/sd4/dist/opamroot.tar.gz --exclude ./dkml/.opam-switch/build --exclude ./log .

          create_tar .ci/sd4/g .ci/sd4/dist/sources.tar.gz .

          # Capture whichever opam.exe we have been using
          install -d .ci/sd4/opamexe
          printf "#!/bin/sh\ninstall -v %s .ci/sd4/opamexe/opam%s\n" '$(command -v opam)' "${exe_ext}" > .ci/sd4/export-opam.sh
          cat .ci/sd4/export-opam.sh >&2
          chmod +x .ci/sd4/export-opam.sh
          .ci/sd4/env-opam .ci/sd4/export-opam.sh

          # Update the tar ball with the opam executable, and possibly DLLs (especially from fdopen)
          if [ -e .ci/sd4/bs/bin ]; then
            find .ci/sd4/bs/bin -mindepth 1 -maxdepth 1 -name "Opam.Runtime.*" | while read -r runtime; do
              cp -rp $runtime .ci/sd4/opamexe/
            done
          fi
          tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/opamexe/

          # Update tar ball with MSVC environment
          if [ -e .ci/sd4/msvcenv ]; then
            tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/msvcenv
          fi

      # Upload

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: setup-dkml-{% raw -%}${{ matrix.abi_pattern }}{%- endraw %}
          path: |
            .ci/sd4/dist/opamroot.tar.gz
            .ci/sd4/dist/sources.tar.gz
            .ci/sd4/dist/env-opam.tar
