# setup-dkml. Short form: sd4
name: setup-dkml

env:
  DEFAULT_DISKUV_OPAM_REPOSITORY_TAG: "19372192396b46dc51900022a19373fc1f2188e7" # "v0.4.0-prerel19_r2" when released
  PIN_OCAMLFIND: "1.9.1"
  PIN_OCAMLBUILD: "0.14.0"
  PIN_DUNE: "2.9.3"
  PPX_EXPECT: "v0.14.1"

on:
  workflow_call:
    outputs:
      import_func:
        description: |
          A shell script that can be eval'd or executed inline in a POSIX shell, that defines
          a shell function 'import'. When 'import HOST_TARGET_ABIS' is called a `opamrun`
          command will be available to subsequent GitHub Action steps.
        value: |
          import() {
            import_HOST_TARGET_ABIS=$1
            shift

            ls -R .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS} >&2

            install -d "$OPAMROOT"
            tar xCfz "$OPAMROOT" .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/opamroot.tar.gz

            install -d .ci/sd4/g
            tar xCfz .ci/sd4/g .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/sources.tar.gz

            # Extract Opam executable and scripts
            tar xvf .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/env-opam.tar

            # Expose opamrun to remaining GitHub Action steps
            opamrunabs="$GITHUB_WORKSPACE/.ci/sd4/opamrun"
            if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
            echo "$opamrunabs" >> $GITHUB_PATH
            #   Special case: GITHUB_PATH does not influence msys2.CMD of msys2/setup-msys2@v2, so place in real MSYS2 PATH
            if [ "${MSYSTEM:-}" = MSYS ]; then
              install -d /usr/local/bin
              install -v .ci/sd4/opamrun/opamrun /usr/local/bin/opamrun
              # Also get rid of link.exe; it interferes with MSVC's link.exe
              mv -v /usr/bin/link.exe /usr/bin/link.gnu.exe
            fi

            # Expose Visual Studio environment variables
            #if [ -e .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/vsenv ]; then
            #  cat .ci/dist/setup-dkml-${import_HOST_TARGET_ABIS}/vsenv >> $GITHUB_ENV
            #fi
          }

    inputs:
      use-fdopen-opam:
        type: boolean
        description: "Use opam.exe from fdopen. Typically only used when bootstrapping Opam for the first time"
        required: false
        default: false
      cache-prefix:
        type: string
        description: The prefix of the cache keys.
        required: false
        default: "v1"
      ocaml:
        type: string
        description: "Git branch, tag or commit for ocaml package in the dkml-compiler repository"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      ocaml-config:
        type: string
        description: "Git branch, tag or commit for ocaml-config package in the dkml-compiler repository"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-compiler:
        type: string
        description: "Git branch, tag or commit for ocaml, ocaml-config, dkml-base-compiler and dkml-option-32bit"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      conf-dkml-cross-toolchain:
        type: string
        description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      diskuv-opam-repository:
        type: string
        description: "Git branch, tag or commit for the diskuv-opam-repository repository"
        required: false
        default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG is used as default for empty strings

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # bootstrap-opam-version
        #   We need an old working Opam; see BOOTSTRAPPING.md of dkml-installer repository.
        #   We use https://github.com/diskuv/dkml-installer-ocaml/releases
        #   to get an old one; you specify its version number here.
        #   Special value of 'os' means use the OS's package manager
        #   (yum/apt/brew).
        # opam-root
        #   We need a stable location for OPAMROOT even if the version of Opam
        #   changes (there are two versions: bootstrap and the compiled one).
        # vsstudio-hostarch
        #   Only needed if `os: windows-*`. The ARCH in
        #   `vsdevcmd.bat -host_arch=ARCH`. Example: x64.
        #   If you have a 64-bit Intel machine you should not use x86 because
        #   _WIN64 will be defined (see https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170)
        #   which is based on the host machine architecture (unless you explicitly
        #   cross-compile with different ARCHs; that is, -host_arch=x64 -arch=x75).
        #   Confer: https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#use-the-developer-tools-in-an-existing-command-window
        #   If you see ppx problems with missing _BitScanForward64 then
        #   https://github.com/janestreet/base/blob/8993e35ba2e83e5020b2deb548253ef1e4a699d4/src/int_math_stubs.c#L25-L32
        #   has been compiled with the wrong host architecture.
        # vsstudio-arch
        #   Only needed if `os: windows-*`. The ARCH in
        #   `vsdevcmd.bat -arch=ARCH`. Example: x86.
        #   Confer: https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#use-the-developer-tools-in-an-existing-command-window
        # dkml-options:
        #   Space separated list of `dkml-option-*` packages.
        #
        #   Use 32-bit installers when possible for maximum portability of
        #   OCaml bytecode. macos is only the major platform without 32-bit.
        #   You don't need to include `dkml-option-32bit` because it is auto
        #   chosen when the target ABI ends with x86.
        include:
          # ------------
          # windows-2019
          #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
          # ------------

          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86
            bits: "32"
            default_shell: msys2 {0}
            exe_ext: .exe
            bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
            # The 32-bit Opam binary has some problems with
            # `Unix.create_process` giving:
            #   "create_process" failed on sleep: Bad file descriptor
            # So use 64-bit Opam binary?
            opam-abi: windows_x86 # _64
            dkml-host-abi: windows_x86
            opam-root: D:/.opam
            vsstudio-hostarch: x64
            vsstudio-arch: x86
          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86_64
            bits: "64"
            default_shell: msys2 {0}
            exe_ext: .exe
            bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
            opam-abi: windows_x86_64
            dkml-host-abi: windows_x86_64
            opam-root: D:/.opam
            vsstudio-hostarch: x64
            vsstudio-arch: x64
          # Unnecessary to use VS 14.16, but it serves as a good template for
          # other (future) VS versions.
          # - os: windows-2019 # 2019 has Visual Studio 2019
          #   host_target_abis: win32_1416-windows_64 # VS2017 compiler available to VS2019
          #   bits: "64"
          #   default_shell: msys2 {0}
          #   exe_ext: .exe
          #   bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
          #   opam-abi: windows_x86_64
          #   dkml-host-abi: windows_x86_64
          #   opam-root: D:/.opam
          #   vsstudio-hostarch: x64
          #   vsstudio-arch: x64
          #   vsstudio-dir: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
          #   vsstudio-vcvarsver: '14.16'
          #   vsstudio-winsdkver: '10.0.18362.0'
          #   vsstudio-msvspreference: 'VS16.5'
          #   vsstudio-cmakegenerator: 'Visual Studio 16 2019'

          # ------------
          # windows-2022
          #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
          # ------------

          # Disabled because haven't done opam log dumps on failure for
          # `opam upgrade`. See https://github.com/diskuv/dkml-component-ocamlcompiler/runs/6059642542?check_suite_focus=true
          # - os: windows-2022
          #   host_target_abis: win32_2022-windows_x86_64
          #   bits: "64"
          #   default_shell: msys2 {0}
          #   exe_ext: .exe
          #   bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
          #   opam-abi: windows_x86_64
          #   dkml-host-abi: windows_x86_64
          #   opam-root: D:/.opam
          #   vsstudio-hostarch: x64
          #   vsstudio-arch: x64
          #   vsstudio-dir: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
          #   vsstudio-vcvarsver: '14.29'
          #   vsstudio-winsdkver: '10.0.20348.0'
          #   vsstudio-msvspreference: 'VS16.11'
          #   vsstudio-cmakegenerator: 'Visual Studio 17 2022'

          - os: macos-latest
            host_target_abis: macos-darwin_all
            bits: "64"
            default_shell: sh
            bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
            dkml-host-abi: darwin_x86_64
            opam-root: /Users/runner/.opam

          # --- NOT APPLICABLE: BUG FIXED ---
          # OCaml 4.12.1 can't compile on manylinux2014 x86 (32-bit). It gives:
          #
          #     /opt/rh/devtoolset-10/root/usr/bin/gcc -c -O2 -fno-strict-aliasing -fwrapv -Wall -Wdeclaration-after-statement -fno-common -fexcess-precision=standard -fno-tree-vrp -ffunction-sections -g -Wno-format -D_FILE_OFFSET_BITS=64 -D_REENTRANT -DCAML_NAME_SPACE   -DCAMLDLLIMPORT= -DNATIVE_CODE -DTARGET_amd64 -DMODEL_default -DSYS_linux   -o signals_nat.n.o signals_nat.c
          #     In file included from signals_nat.c:35:
          #     signals_nat.c: In function ‘segv_handler’:
          #     signals_osdep.h:34:72: error: ‘REG_CR2’ undeclared (first use in this function); did you mean ‘REG_CS’?
          #       34 |   #define CONTEXT_FAULTING_ADDRESS ((char *)context->uc_mcontext.gregs[REG_CR2])
          #           |                                                                        ^~~~~~~
          #     signals_nat.c:207:16: note: in expansion of macro ‘CONTEXT_FAULTING_ADDRESS’
          #       207 |   fault_addr = CONTEXT_FAULTING_ADDRESS;
          #           |                ^~~~~~~~~~~~~~~~~~~~~~~~
          #     signals_osdep.h:34:72: note: each undeclared identifier is reported only once for each function it appears in
          #       34 |   #define CONTEXT_FAULTING_ADDRESS ((char *)context->uc_mcontext.gregs[REG_CR2])
          #           |                                                                        ^~~~~~~
          #     signals_nat.c:207:16: note: in expansion of macro ‘CONTEXT_FAULTING_ADDRESS’
          #       207 |   fault_addr = CONTEXT_FAULTING_ADDRESS;
          #           |                ^~~~~~~~~~~~~~~~~~~~~~~~
          #     signals_osdep.h:32:50: error: ‘REG_RSP’ undeclared (first use in this function); did you mean ‘REG_ESP’?
          #       32 |   #define CONTEXT_SP (context->uc_mcontext.gregs[REG_RSP])
          #           |                                                  ^~~~~~~
          #     signals_nat.c:210:33: note: in expansion of macro ‘CONTEXT_SP’
          #       210 |       && (uintnat)fault_addr >= CONTEXT_SP - EXTRA_STACK
          #           |                                 ^~~~~~~~~~
          #     signals_osdep.h:31:50: error: ‘REG_RIP’ undeclared (first use in this function); did you mean ‘REG_EIP’?
          #       31 |   #define CONTEXT_PC (context->uc_mcontext.gregs[REG_RIP])
          #           |                                                  ^~~~~~~
          #     signals_nat.c:212:49: note: in expansion of macro ‘CONTEXT_PC’
          #       212 |       && caml_find_code_fragment_by_pc((char *) CONTEXT_PC) != NULL
          #           |                                                 ^~~~~~~~~~
          #     make[1]: *** [signals_nat.n.o] Error 1
          #     make[1]: Leaving directory `/work/opamroot/dkml/src-ocaml/runtime'
          #     make: *** [makeruntimeopt] Error 2
          #     FATAL: make opt-core failed
          - os: ubuntu-latest
            host_target_abis: manylinux2014-linux_x86
            bits: "32"
            comment: (CentOS 7, etc.)
            default_shell: sh
            bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
            dkml-host-abi: linux_x86
            opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
            in_docker: "true"
            dockcross_image: dockcross/manylinux2014-x86
            #   Gets rid of: WARNING: The requested image's platform (linux/386) does not match the detected host platform (linux/amd64) and no specific platform was requested
            dockcross_run_extra_args: --platform linux/386

          # - os: ubuntu-latest
          #   host_target_abis: manylinux_2_24-linux_x86
          #   bits: "32"
          #   comment: (glibc>=2.24, Debian 9, etc.)
          #   default_shell: sh
          #   bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
          #   dkml-host-abi: linux_x86
          #   opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
          #   docker_runner: docker run --platform linux/386 --rm -v $GITHUB_WORKSPACE:/work --workdir=/work quay.io/pypa/manylinux_2_24_i686 linux32
          #   in_docker: "true"

          - os: ubuntu-latest
            host_target_abis: manylinux2014-linux_x86_64
            bits: "64"
            comment: (CentOS 7, etc.)
            default_shell: sh
            bootstrap-opam-version: "2.1.0.msys2.12-prerel1"
            dkml-host-abi: linux_x86_64
            opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
            dockcross_image: dockcross/manylinux2014-x64
            in_docker: "true"

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.host_target_abis }} ${{ matrix.comment }}

    defaults:
      run:
        shell: ${{ matrix.default_shell }}

    env:
      OPAMROOT: ${{ matrix.opam-root }}
      EXE_EXT: ${{ matrix.exe_ext }}

      # Increase _rN_ if you get `make inconsistent assumptions over interface Stdlib__format` errors
      # or if you otherwise need a fresh Opam root
      OPAM_BINARY_CACHE_KEY: r1_${{
        inputs.use-fdopen-opam }}_${{
        matrix.dkml-host-abi }}_${{
        matrix.opam-abi }}_${{
        matrix.bootstrap-opam-version }}

      # When non-empty, instead of building the standard components from the
      # central Opam repository, use the github/gitlab development repositories
      # directly.
      CONF_DKML_CROSS_TOOLCHAIN:        "${{ inputs.conf-dkml-cross-toolchain }}"
      INPUT_OCAML:                      "${{ inputs.ocaml }}"
      OCAML_CONFIG:                     "${{ inputs.ocaml-config }}"
      DISKUV_OPAM_REPOSITORY:           "${{ inputs.diskuv-opam-repository }}"

      # These are not independent of dkml-compiler; they reside in same
      # repository; we cannot go over max 10 GitHub workflow inputs.
      DKML_OPTION_32BIT:                "${{ inputs.dkml-compiler }}"
      DKML_BASE_COMPILER:               "${{ inputs.dkml-compiler }}"

      VS_ARCH: ${{ matrix.vsstudio-arch }}
      VS_HOST_ARCH: ${{ matrix.vsstudio-hostarch }}

      SHA512_DEVNULL: "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"

      # `>-` will flatten the multiple lines into a single line with no trailing EOL.
      # By design `populate-cache` is not part of the cache key
      CACHE_KEY_GITHUB_INPUTS: >-
        INPUT_OCAML=${{ inputs.ocaml }}
        OCAML_CONFIG=${{ inputs.ocaml-config }}
        DISKUV_OPAM_REPOSITORY=${{ inputs.diskuv-opam-repository }}
        ALL_COMPILER=${{ inputs.dkml-compiler }}
        CONF_DKML_CROSS_TOOLCHAIN=${{ inputs.conf-dkml-cross-toolchain }}

    steps:
      # Install utilities
      #   tree: Nice for pretty-printing the final package tree
      #   wget: Needed for the Windows Opam download-command
      #   make: Needed for OCaml ./configure + make
      #   pkg-config: conf-pkg-config is used by many OCaml packages
      #   rsync: On Windows the `cp` fallback can fail; loosely related to
      #        https://github.com/ocaml/opam/issues/4080
      #   diffutils: Needed for diff, which is needed for Opam
      #   patch: Needed for Opam
      #   unzip: Needed for Opam
      #   git: Needed for Opam
      - name: Install MSYS2 (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          # 1. For Opam 2.0 from fdopen we need MSYS2/Cygwin tar that can handle
          #    Unix paths like /tmp.
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git
            tar

      - name: Uninstall MSYS2 conflicting executables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: msys2 {0}
        # link.exe interferes with MSVC's link.exe
        run: rm -vf /usr/bin/link.exe

      - name: Checkout dkml-runtime-distribution (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-runtime-distribution
          path: .ci/sd4/drd
          ref: 1bf73a207e054bd60b620c863a88d7c34a0efac6

      # Bootstrapping Opam

      - name: Cache Opam bootstrap by OS
        uses: actions/cache@v2
        with:
          path: .ci/sd4/bs
          key:
            ${{ inputs.cache-prefix }}_${{ runner.os }}-sd4-bs-${{ env.OPAM_BINARY_CACHE_KEY }}

      #   Bootstrap from historical release
      - name: Bootstrap Opam from fdopen (Windows)
        if: inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')
        shell: msys2 {0}
        run: |
          #!/bin/sh
          set -eufx

          install -d .ci/sd4/bs/bin
          wget -O "$GITHUB_WORKSPACE"/.ci/sd4/opam64.tar.xz https://github.com/fdopen/opam-repository-mingw/releases/download/0.0.0.2/opam64.tar.xz

          # this stalls: tar xvCfJ "$GITHUB_WORKSPACE"/.ci/sd4 "$GITHUB_WORKSPACE"/.ci/sd4/opam64.tar.xz
          xz -v -d "$GITHUB_WORKSPACE"/.ci/sd4/opam64.tar.xz
          tar xvCf .ci/sd4 .ci/sd4/opam64.tar

          mv -v "$GITHUB_WORKSPACE"/.ci/sd4/opam64/bin/opam.exe            "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/
          mv -v "$GITHUB_WORKSPACE"/.ci/sd4/opam64/bin/opam-installer.exe  "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/
          rm -rf "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/Opam.Runtime.amd64
          mv -v "$GITHUB_WORKSPACE"/.ci/sd4/opam64/bin/Opam.Runtime.amd64/ "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/
          ldd "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/opam.exe
          ldd "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/opam-installer.exe
      - name: Bootstrap Opam from historical release (non-Windows; Windows non-fdopen)
        if: "!(inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')) && matrix.bootstrap-opam-version != 'os'"
        env:
          VER: ${{ matrix.bootstrap-opam-version }}
          ABI_DIR: ${{ matrix.host_target_abis }}/staging-files/${{ matrix.dkml-host-abi}}
        run: |
          #!/bin/sh
          set -eufx
          install -d .ci/sd4/bs
          cd .ci/sd4/bs

          if [ ! -e version ] || [ "$(cat version)" != "$VER" ]; then
            curl -L -o opam.tar.gz "https://github.com/diskuv/dkml-component-opam/releases/download/v$VER/dkml-component-staging-opam.tar.gz"
            tar tvfz opam.tar.gz
            tar xfz opam.tar.gz "./$ABI_DIR/"
            rm -rf bin/
            mv "$ABI_DIR"/bin .
            rm -rf "${{ matrix.host_target_abis }}"
            printf "%s" "$VER" > version
          fi
          rm -f opam.tar.gz

      #   Bootstrap from package manager or GitHub ocaml/opam release
      - name: Bootstrap Opam from package manager (macOS)
        if: startsWith(matrix.dkml-host-abi, 'darwin') && matrix.bootstrap-opam-version == 'os'
        run: brew install gpatch && brew install opam
      - name: Bootstrap Opam from GitHub ocaml/opam release (Linux x86_64)
        if: matrix.dkml-host-abi == 'linux_x86_64' && matrix.bootstrap-opam-version == 'os'
        run: |
          #!/bin/sh
          set -eufx
          install -d .ci/sd4/bs/bin
          if [ ! -x .ci/sd4/bs/bin/opam ]; then
            wget -O .ci/sd4/bs/bin/opam.tmp https://github.com/ocaml/opam/releases/download/2.1.2/opam-2.1.2-x86_64-linux
            sha512_check=$(openssl sha512 2>&1 < /dev/null | cut -f 2 -d ' ')
            if [ "x$SHA512_DEVNULL" = "x$sha512_check" ]; then
                sha512=$(openssl sha512 ".ci/sd4/bs/bin/opam.tmp" 2> /dev/null | cut -f 2 -d ' ')
                check="c0657ecbd4dc212587a4da70c5ff0402df95d148867be0e1eb1be8863a2851015f191437c3c99b7c2b153fcaa56cac99169c76ec94c5787750d7a59cd1fbb68b"
                test "x$sha512" = "x$check"
                chmod +x .ci/sd4/bs/bin/opam.tmp
                mv .ci/sd4/bs/bin/opam.tmp .ci/sd4/bs/bin/opam
            else
                echo "openssl 512 option unsupported."
                exit 61
            fi
          fi
      - name: Bootstrap Opam from GitHub ocaml/opam release (Linux x86)
        if: matrix.dkml-host-abi == 'linux_x86' && matrix.bootstrap-opam-version == 'os'
        run: |
          #!/bin/sh
          set -eufx
          install -d .ci/sd4/bs/bin
          if [ ! -x .ci/sd4/bs/bin/opam ]; then
            wget -O .ci/sd4/bs/bin/opam.tmp https://github.com/ocaml/opam/releases/download/2.1.2/opam-2.1.2-i686-linux
            sha512_check=$(openssl sha512 2>&1 < /dev/null | cut -f 2 -d ' ')
            if [ "x$SHA512_DEVNULL" = "x$sha512_check" ]; then
                sha512=$(openssl sha512 ".ci/sd4/bs/bin/opam.tmp" 2> /dev/null | cut -f 2 -d ' ')
                check="85a480d60e09a7d37fa0d0434ed97a3187434772ceb4e7e8faa5b06bc18423d004af3ad5849c7d35e72dca155103257fd6b1178872df8291583929eb8f884b6a"
                test "x$sha512" = "x$check"
                chmod +x .ci/sd4/bs/bin/opam.tmp
                mv .ci/sd4/bs/bin/opam.tmp .ci/sd4/bs/bin/opam
            else
                echo "openssl 512 option unsupported."
                exit 61
            fi
          fi

      # Opam prerequisites for using opam (not for installing opam)

      - name: Start environment distribution tarball
        # We use .tar rather than .tar.gz/.tar.bz2 because we can
        # repeatedly add to an uncompressed .tar. But we need to
        # start with an empty tarball since some tar programs will
        # only add (`tar rf xyz.tar`) to an existing .tar.
        run: |
          install -d .ci/sd4/dist
          tar cf .ci/sd4/dist/env-opam.tar -T /dev/null

      - name: Get dockcross and Opam prerequisites (ManyLinux)
        if: matrix.dockcross_image != ''
        run: |
          install -d .ci/sd4
          docker run ${{ matrix.dockcross_run_extra_args }} --rm "${{ matrix.dockcross_image }}" > .ci/sd4/dockcross
          chmod +x .ci/sd4/dockcross

          # Bundle for consumers of setup-dkml.yml
          tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/dockcross

          # rsync needs to be available, even after Docker container disappears
          if [ ! -e .ci/sd4/bs/bin/rsync ]; then
            install -d .ci/sd4/bs/bin
            .ci/sd4/dockcross --args "${{ matrix.dockcross_run_extra_args }}" sh -xc 'sudo yum install -y rsync && install -v $(command -v rsync) .ci/sd4/bs/bin'
          fi

          # Bundle for consumers of setup-dkml.yml
          tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/bs/bin/rsync

      - name: Get Opam prerequisites (Linux Docker)
        if: matrix.docker_runner != ''
        run: |
          # rsync needs to be available, even after Docker container disappears
          if [ ! -e .ci/sd4/bs/bin/rsync.deps ]; then
            install -d .ci/sd4/bs/bin
            ${{ matrix.docker_runner }} sh -xc '
              apt-get update &&
              apt-get install -y rsync &&
              ldd /usr/bin/rsync &&
              ls -l /lib/i386-linux-gnu/libpopt.so.0 /lib/i386-linux-gnu/libacl.so.1 /lib/i386-linux-gnu/libattr.so.1 &&
              tar cvCfhz / /work/.ci/sd4/bs/bin/deps.tar.gz /usr/bin/rsync /lib/i386-linux-gnu/libpopt.so.0
            '
            touch .ci/sd4/bs/bin/rsync.deps
          fi

      # Setup Opam

      - name: Cache Opam root by (host,target)
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/config
            ${{ matrix.opam-root }}/installer-${{ env.INSTALLERNAME }}
            ${{ matrix.opam-root }}/.ci.root-init
          key:
            ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-opamroot-${{ env.OPAM_BINARY_CACHE_KEY }}

      - name: Write and Distribute Opam scripts
        run: |
          #!/bin/sh
          set -eufx

          # ---------------------
          # Empty opam repository
          # ---------------------

          install -d .ci/sd4/eor
          cat > .ci/sd4/eor/repo <<EOF
          opam-version: "2.0"
          browse: "https://opam.ocaml.org/pkg/"
          upstream: "https://github.com/ocaml/opam-repository/tree/master/"
          EOF

          # ---------------
          # Create Opam support scripts (not needed for all platforms)
          #   The PATH to find opam must work internally in setup-dkml.yml (sd4/bs/bin) and
          #   by consumers of setup-dkml.yml (sd4/opamexe)
          # ---------------

          USER_ID=$(id -u)
          GROUP_ID=$(id -g)
          USER_NAME=$(id -un)
          GROUP_NAME=$(id -gn)

          case "${{ matrix.opam-root }}" in
            /* | ?:*) # /a/b/c or C:\Windows
              ;;
            *) # relative path
              cat > .ci/sd4/env-opam-real <<EOF
          #!/bin/sh
          set -euf
          export PATH="/work/.ci/sd4/bs/bin:/work/.ci/sd4/opamexe:\$PATH"
          export OPAMROOT=/work/${{ matrix.opam-root }}
          exec "\$@"
          EOF
              chmod +x .ci/sd4/env-opam-real
              ;;
          esac

          cat > .ci/sd4/env-opam-deescalate <<EOF
          #!/bin/sh
          set -euf

          if [ -e /work/.ci/sd4/bs/bin/deps.tar.gz ]; then
            tar xCfz / /work/.ci/sd4/bs/bin/deps.tar.gz
          fi

          groupadd -g ${GROUP_ID} ${GROUP_NAME}
          useradd -l -m -u ${USER_ID} -g ${GROUP_ID} ${USER_NAME}
          exec runuser -u ${USER_NAME} -g ${GROUP_NAME} -- "\$@"
          EOF

          chmod +x .ci/sd4/env-opam-deescalate

          # -----------------------------------
          # Create env-opam
          # -----------------------------------

          install -d .ci/sd4/dist

          if [ -x .ci/sd4/dockcross ]; then

            cat > .ci/sd4/env-opam <<EOF
          #!/bin/sh
          set -euf
          exec "$GITHUB_WORKSPACE"/.ci/sd4/dockcross --args "${{ matrix.dockcross_run_extra_args }}" /work/.ci/sd4/env-opam-real "\$@"
          EOF
            chmod +x .ci/sd4/env-opam

            # Bundle for consumers of setup-dkml.yml
            cat .ci/sd4/env-opam-real >&2
            tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/env-opam .ci/sd4/env-opam-real

          elif [ -n "${{ matrix.docker_runner }}" ]; then

            cat > .ci/sd4/env-opam <<EOF
          #!/bin/sh
          set -euf
          exec ${{ matrix.docker_runner }} /work/.ci/sd4/env-opam-deescalate /work/.ci/sd4/env-opam-real "\$@"
          EOF
            chmod +x .ci/sd4/env-opam

            # Bundle for consumers of setup-dkml.yml
            cat .ci/sd4/env-opam-real >&2
            cat .ci/sd4/env-opam-deescalate >&2
            tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/env-opam .ci/sd4/env-opam-real .ci/sd4/env-opam-deescalate

          else

            cat > .ci/sd4/env-opam <<EOF
          #!/bin/sh
          set -euf
          export PATH="\$GITHUB_WORKSPACE/.ci/sd4/bs/bin:\$GITHUB_WORKSPACE/.ci/sd4/opamexe:\$PATH"
          exec "\$@"
          EOF
            chmod +x .ci/sd4/env-opam

            # Bundle for consumers of setup-dkml.yml
            tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/env-opam

          fi
          cat .ci/sd4/env-opam >&2

          # -------
          # opamrun
          # -------

          install -d .ci/sd4/opamrun
          cat > .ci/sd4/opamrun/opamrun <<EOF
          #!/bin/sh
          set -eufx

          # Add MSVC compiler environment if available
          if [ -e "\$GITHUB_WORKSPACE"/.ci/sd4/msvcenv ]; then
            _oldpath="\$PATH"
            . "\$GITHUB_WORKSPACE"/.ci/sd4/msvcenv
            PATH="\$PATH:\$_oldpath"

            # MSVC (link.exe) needs a TMP as well.
            # Confer: https://docs.microsoft.com/en-us/cpp/build/reference/linking?view=msvc-170#link-environment-variables
            export TMP="\$RUNNER_TEMP"
            if [ -x /usr/bin/cygpath ]; then
              TMP=\$(/usr/bin/cygpath -aw "\$TMP")
            fi
          fi

          # Windows
          if [ -n "${COMSPEC:-}" ]; then
            # We must place MSYS2 in front of path so that MSYS2
            # tar.exe is used instead of Windows tar.exe.
            PATH="/usr/bin:\$PATH"
          fi

          exec "\$GITHUB_WORKSPACE/.ci/sd4/env-opam" opam "\$@"
          EOF
          chmod +x .ci/sd4/opamrun/opamrun

          # Boilerplate to expose opamrun (also used for consumers of setup-dkml.yml)
          opamrunabs="$GITHUB_WORKSPACE/.ci/sd4/opamrun"
          if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
          echo "$opamrunabs" >> $GITHUB_PATH
          # Special case: GITHUB_PATH does not influence msys2.CMD of msys2/setup-msys2@v2, so place in real MSYS2 PATH
          if [ "${MSYSTEM:-}" = MSYS ]; then install -d /usr/local/bin; install -v .ci/sd4/opamrun/opamrun /usr/local/bin/opamrun; fi

          # Bundle for consumers of setup-dkml.yml
          tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/opamrun

      - name: Initialize Opam root
        env:
          ISWINDOWS: ${{ startsWith(matrix.dkml-host-abi, 'windows') }}
        # Complicated Opam sequence is because:
        # 1. Opam's default curl does not work on Windows,
        #    and `opam init` does not provide a way to change it (TODO: need
        #    a PR!).
        # 2. We have to separate the Opam download cache from the other Opam
        #    caches
        run: |
          #!/bin/sh
          set -eufx

          if [ ! -e "$OPAMROOT/.ci.root-init" ]; then
            rm -rf "$OPAMROOT" # Clear any partial previous attempt
            if [ "$ISWINDOWS" = true ]; then
              eor=$(cygpath -am "$GITHUB_WORKSPACE"/.ci/sd4/eor)
              opamrun init --disable-sandboxing --no-setup --kind local --bare "$eor"
              case "$(opamrun --version)" in
                2.0.*) echo 'download-command: wget' >> $OPAMROOT/config ;;
                *)     opamrun option --yes --global download-command=wget
              esac
            elif [ "${{ matrix.in_docker }}" = "true" ]; then
              opamrun init --disable-sandboxing --no-setup --kind local --bare "/work/.ci/sd4/eor"
            else
              opamrun init --disable-sandboxing --no-setup --kind local --bare "$GITHUB_WORKSPACE/.ci/sd4/eor"
            fi
            touch "$OPAMROOT/.ci.root-init"
          fi
          opamrun var --global || true

      # Build OCaml

      - name: Cache Opam downloads and repositories by (host,target)
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/repo
            ${{ matrix.opam-root }}/download-cache
            ${{ matrix.opam-root }}/.ci.repo-init
          key:
            ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-opamrepo-${{
              env.OPAM_BINARY_CACHE_KEY }}-${{
              inputs.diskuv-opam-repository }}-${{
              env.DEFAULT_DISKUV_OPAM_REPOSITORY_TAG }}-${{
              env.CACHE_KEY_GITHUB_INPUTS }}

      - name: Setup Opam repositories
        run: |
          #!/bin/sh
          set -eufx
          if [ -x /usr/bin/cygpath ]; then
            export TEMP=$(cygpath -am "$RUNNER_TEMP")
          fi
          if [ ! -e "$OPAMROOT/.ci.repo-init" ]; then
            opamrun repository remove default --yes --all --dont-select || true
            opamrun repository remove diskuv --yes --all --dont-select || true
            opamrun repository add default https://opam.ocaml.org --yes --dont-select
            opamrun repository add diskuv "git+https://github.com/diskuv/diskuv-opam-repository.git#${DISKUV_OPAM_REPOSITORY:-$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG}" --yes --dont-select
            touch "$OPAMROOT/.ci.repo-init"
          fi

      - name: Cache Opam compiler switch by (host,target)
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/dkml
            ${{ matrix.opam-root }}/config
          key:
            ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-switch-${{
              env.OPAM_BINARY_CACHE_KEY }}-${{
              inputs.diskuv-opam-repository }}-${{
              env.DEFAULT_DISKUV_OPAM_REPOSITORY_TAG }}-${{
              env.CACHE_KEY_GITHUB_INPUTS }}

      # Create, or recreate, the Opam switch. The Opam switch should not be
      # cached except for the compiler (confer docs for setup-ocaml GitHub
      # Action). When we initially create the switch and then GitHub loads the
      # cache of the Opam root,
      # the switch will be present in OPAMROOT/config but OPAMROOT/<switch>
      # will not be present ... recreating the switch to fix the inconsistent
      # state.
      - name: Create Opam switch (TODO - missing fdopen repository) (TODO - missing 1000+ dkml pins)
        run: |
          #!/bin/sh
          set -eufx
          cat $OPAMROOT/config >&2
          if ! opamrun switch list --short | grep '^dkml$'; then opamrun switch create dkml --repos diskuv,default --empty --yes; fi

      # The action/checkout steps used for pinning will re-use existing Git objects
      # because of caching
      - name: Cache Git checkouts of Opam pins by OS
        uses: actions/cache@v2
        with:
          path: .ci/sd4/g
          key:
            ${{ inputs.cache-prefix }}_${{ runner.os }}-sd4-git

      # dkml-base-compiler

      - name: Checkout dkml-base-compiler
        if: env.DKML_BASE_COMPILER != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/dkml-base-compiler
          ref: ${{ env.DKML_BASE_COMPILER }} # empty is no `ref`, which is default branch

      - name: Pin dkml-base-compiler to checkout instead of Opam repository
        if: env.DKML_BASE_COMPILER != '@repository@'
        run: opamrun pin add --yes --no-action dkml-base-compiler .ci/sd4/g/dkml-base-compiler

      # conf-dkml-cross-toolchain

      - name: Checkout conf-dkml-cross-toolchain
        if: env.CONF_DKML_CROSS_TOOLCHAIN != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/conf-dkml-cross-toolchain
          path: .ci/sd4/g/conf-dkml-cross-toolchain
          ref: ${{ env.CONF_DKML_CROSS_TOOLCHAIN }} # empty is no `ref`, which is default branch

      - name: Pin conf-dkml-cross-toolchain to checkout instead of Opam repository
        if: env.CONF_DKML_CROSS_TOOLCHAIN != '@repository@'
        run: opamrun pin add --yes --no-action conf-dkml-cross-toolchain .ci/sd4/g/conf-dkml-cross-toolchain

      # ocaml

      - name: Checkout ocaml
        if: env.INPUT_OCAML != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/ocaml
          ref: ${{ env.INPUT_OCAML }} # empty is no `ref`, which is default branch

      - name: Pin ocaml.4.12.1 to checkout instead of Opam repository
        if: env.INPUT_OCAML != '@repository@'
        run: opamrun pin add --yes --no-action ocaml.4.12.1 .ci/sd4/g/ocaml

      # ocaml-config

      - name: Checkout ocaml-config
        if: env.OCAML_CONFIG != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/ocaml-config
          ref: ${{ env.OCAML_CONFIG }} # empty is no `ref`, which is default branch

      - name: Pin ocaml-config.2 to checkout instead of Opam repository
        if: env.OCAML_CONFIG != '@repository@'
        run: opamrun pin add --yes --no-action ocaml-config.2 .ci/sd4/g/ocaml-config

      # dkml-option-32bit

      - name: Checkout dkml-option-32bit
        if: env.DKML_OPTION_32BIT != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/dkml-option-32bit
          ref: ${{ env.DKML_OPTION_32BIT }} # empty is no `ref`, which is default branch

      - name: Pin dkml-option-32bit to checkout instead of Opam repository
        if: env.DKML_OPTION_32BIT != '@repository@'
        run: opamrun pin add --yes --no-action dkml-option-32bit .ci/sd4/g/dkml-option-32bit

      # patches necessary for Windows in diskuv-opam-repository
      #
      # - ocamlfind and ocamlbuild
      #
      # - dune-configurator (and hence Dune)
      # Dune 2.9.1 and 3.0.2 will fail to build jst-config.v0.14.1 because for jst-config/discover/discover.ml Dune does:
      #   cl -nologo -O2 -Gy- -MD    -I Z:/.opam-root-cached-8/installer-ocaml/lib/ocaml -o C:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.obj -c C:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.c advapi32.lib ws2_32.lib version.lib
      # instead of
      #   cl -nologo -O2 -Gy- -MD    -I Z:/.opam-root-cached-8/installer-ocaml/lib/ocaml /FoC:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.obj -c C:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.c advapi32.lib ws2_32.lib version.lib
      # with the (irrelevant) test.c file:
      #    #include <stdio.h>
      #    #include <caml/config.h>
      #
      #    #ifdef ARCH_BIG_ENDIAN
      #    const char *s0 = "BEGIN-0-true-END";
      #    #else
      #    const char *s0 = "BEGIN-0-false-END";
      #    #endif
      #
      #    #ifdef ARCH_SIXTYFOUR
      #    const char *s1 = "BEGIN-1-true-END";
      #    #else
      #    const char *s1 = "BEGIN-1-false-END";
      #    #endif
      #
      # The actual problem is dune-configurator ... we only have patches in Diskuv
      # repository up until 2.9.3. Need to upstream fix the problem.
      #
      # - ppx_expect; only patch is for v0.14.1. Need to upstream fix the problem.
      - name: Pins for packages in diskuv-opam-repository
        run: |
          opamrun pin add --yes --no-action -k version ocamlfind ${{ env.PIN_OCAMLFIND }}
          opamrun pin add --yes --no-action -k version ocamlbuild ${{ env.PIN_OCAMLBUILD }}
          opamrun pin add --yes --no-action -k version dune ${{ env.PIN_DUNE }}
          opamrun pin add --yes --no-action -k version dune-configurator ${{ env.PIN_DUNE }}
          opamrun pin add --yes --no-action -k version ppx_expect ${{ env.PPX_EXPECT }}

      # Setup C compiler

      - name: Cache Visual Studio environment variables by (host,target)
        uses: actions/cache@v2
        with:
          path: .ci/sd4/vsenv
          key: ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-vsenv-${{ env.VS_ARCH }}-${{ env.VS_HOST_ARCH }}-${{ matrix.vsstudio-dir }}

      - name: Diagnose Visual Studio environment variables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: pwsh
        run: |
          if (Test-Path -Path "C:\Program Files (x86)\Windows Kits\10\include") {
            dir "C:\Program Files (x86)\Windows Kits\10\include"
          }
          if (Test-Path -Path "C:\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsDesktop") {
            dir "C:\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsDesktop"
          }

          $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\drd\src\windows"
          Import-Module Machine

          $allinstances = Get-VSSetupInstance
          $allinstances | ConvertTo-Json -Depth 5

      - name: Locate Visual Studio (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows') && matrix.vsstudio-dir == ''
        shell: pwsh
        run: |
          if (!(Test-Path -Path ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv)) {
            $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\drd\src\windows"
            Import-Module Machine

            $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
            $CompatibleVisualStudios
            $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
            $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
            $VisualStudioProps

            echo "VS_DIR=$($VisualStudioProps.InstallPath)" > ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_VCVARSVER=$($VisualStudioProps.VcVarsVer)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_WINSDKVER=$($VisualStudioProps.WinSdkVer)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_MSVSPREFERENCE=$($VisualStudioProps.MsvsPreference)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_CMAKEGENERATOR=$($VisualStudioProps.CMakeGenerator)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          }

      - name: Link to hardcoded Visual Studio (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows') && matrix.vsstudio-dir != ''
        shell: pwsh
        run: |
          echo "VS_DIR=${{ matrix.vsstudio-dir }}" > ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_VCVARSVER=${{ matrix.vsstudio-vcvarsver }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_WINSDKVER=${{ matrix.vsstudio-winsdkver }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_MSVSPREFERENCE=${{ matrix.vsstudio-msvspreference }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_CMAKEGENERATOR=${{ matrix.vsstudio-cmakegenerator }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv

      - name: Export Visual Studio location and type (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: pwsh
        run: |
          Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv >> $env:GITHUB_ENV

      - name: Create Visual Studio support scripts (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: pwsh
        run: |
          # MSVC environment variables:
          # 1. https://docs.microsoft.com/en-us/cpp/build/reference/cl-environment-variables?view=msvc-170
          # 2. https://docs.microsoft.com/en-us/cpp/build/reference/linking?view=msvc-170#link-environment-variables (except TMP)
          $awk = @"
          BEGIN{FS="="}
          `$1=="CL"||`$1=="_CL_"||`$1=="INCLUDE"||`$1=="LIBPATH" {print "export " `$0}
          `$1=="LINK"||`$1=="_LINK_"||`$1=="LIB"||`$1=="PATH"    {print "export " `$0}
          "@
          [IO.File]::WriteAllLines(".ci/sd4/msvcenv.awk", $awk)

          $awk = @"
          {print "export PATH='" `$0 "'"}
          "@
          [IO.File]::WriteAllLines(".ci/sd4/msvcpath.awk", $awk)

      - name: Capture Visual Studio compiler environment (1/2) (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: cmd
        run: |
          @echo OFF

          REM The OCaml dkml-base-compiler will compile fine but any other
          REM packages (ocamlbuild, etc.) which
          REM need a native compiler will fail without the MSVC compiler in the
          REM PATH. There isn't a `with-dkml.exe` alternative available at
          REM this stage of the GitHub workflow.
          call "%VS_DIR%\Common7\Tools\VsDevCmd.bat" -no_logo -host_arch=%VS_HOST_ARCH% -arch=%VS_ARCH% -vcvars_ver=%VS_VCVARSVER% -winsdk=%VS_WINSDKVER%
          if %ERRORLEVEL% neq 0 (
            echo.
            echo.The "%VS_DIR%\Common7\Tools\VsDevCmd.bat" command failed
            echo.with exit code %ERRORLEVEL%.
            echo.
            exit /b %ERRORLEVEL%
          )

          REM VsDevCmd.bat turns off echo; be explicit if we want it on or off
          @echo OFF

          REM ~~We must place MSYS2 in front of path so that MSYS2
          REM ~~tar.exe is used instead of Windows tar.exe.
          REM ~~But setup-msys2 puts MSYS2 in a temp directory when release=false.
          REM ~~So we use setup-msys2's `msys2 -c` wrapper.
          REM ~~FOR /F "tokens=* usebackq" %%F IN (`msys2 -c "cygpath -aw /usr/bin"`) DO (
          REM ~~  set "MSYS2BIN=%%F"
          REM ~~)
          REM ~~set PATH=%MSYS2BIN%;%PATH%

          REM MSVC environment variables in Unix format.
          REM * We can't use `msys2 -c` directly to query for all MSVC environment variables
          REM   because it stomps over the PATH. So we have a separate solution for PATH.
          echo %PATH% > .ci\sd4\msvcpath
          msys2 -c "set | grep -v '^PATH=' | awk -f .ci/sd4/msvcenv.awk > .ci/sd4/msvcenv"

          REM (For some reason no shell commands can happen after the last msys2 -c, so split into 2 GitHub Actions steps!)

      - name: Capture Visual Studio compiler environment (2/2) (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        run: |
          #!/bin/sh
          set -euf
          cat .ci/sd4/msvcpath | tr -d '\r' | cygpath --path -f - | awk -f .ci/sd4/msvcpath.awk >> .ci/sd4/msvcenv

          tail -n100 .ci/sd4/msvcpath .ci/sd4/msvcenv >&2


      - name: Use Visual Studio in dkml-* Opam packages (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        run: |

          # Make the standard input work as an OCaml string.
          # This currently only escapes backslashes and double quotes.
          escape_arg_as_ocaml_string() {
              escape_arg_as_ocaml_string_ARG=$1
              shift
              printf "%s" "$escape_arg_as_ocaml_string_ARG" | sed 's#\\#\\\\#g; s#"#\\"#g;'
          }
          E_VS_DIR=$(escape_arg_as_ocaml_string "$VS_DIR")
          E_VS_VCVARSVER=$(escape_arg_as_ocaml_string "$VS_VCVARSVER")
          E_VS_WINSDKVER=$(escape_arg_as_ocaml_string "$VS_WINSDKVER")
          E_VS_MSVSPREFERENCE=$(escape_arg_as_ocaml_string "$VS_MSVSPREFERENCE")
          E_VS_CMAKEGENERATOR=$(escape_arg_as_ocaml_string "$VS_CMAKEGENERATOR")

          case "$(opamrun --version)" in
            2.0.*)
              if [ "${{ matrix.in_docker }}" = "true" ]; then
                echo Opam 2.0 support in dockcross to use a portable opam var prefix not yet implemented
                exit 67
              fi
              OP=$(opamrun var prefix)
              OPSC=$OP/.opam-switch/switch-config
              if grep setenv: $OPSC; then
                echo "INFO: Updating switch-config. Old was:"
                awk '{print ">> " $0}' $OPSC

                awk '$1=="setenv:"{x=1} x==0{print} x==1 && $0=="]"{x=0}' $OPSC > $OPSC.trimmed
                mv $OPSC.trimmed $OPSC
              fi
              echo 'setenv: [' >> $OPSC
              echo '  [DKML_COMPILE_SPEC = "1"]' >> $OPSC
              echo '  [DKML_COMPILE_TYPE = "VS"]' >> $OPSC
              echo "  [DKML_COMPILE_VS_DIR = \"$E_VS_DIR\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\"]" >> $OPSC
              echo "  [DKML_HOST_ABI = \"${{ matrix.dkml-host-abi }}\"]" >> $OPSC
              echo ']' >> $OPSC
              cat $OPSC >&2 # print
              ;;
            *)
              opamrun option setenv= # reset
              opamrun option setenv+='DKML_COMPILE_SPEC = "1"'
              opamrun option setenv+='DKML_COMPILE_TYPE = "VS"'
              opamrun option setenv+="DKML_COMPILE_VS_DIR = \"$E_VS_DIR\""
              opamrun option setenv+="DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\""
              opamrun option setenv+="DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\""
              opamrun option setenv+="DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\""
              opamrun option setenv+="DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\""
              opamrun option setenv+="DKML_HOST_ABI = \"${{ matrix.dkml-host-abi }}\""
              opamrun option setenv # print
              ;;
          esac

      - name: Install OCaml compiler
        run: |
          #!/bin/sh
          set -eufx
          if [ "${{ matrix.bits }}" = 32 ]; then
            M_DKMLOPTION_32BIT=dkml-option-32bit
          else
            M_DKMLOPTION_32BIT=
          fi
          if ! opamrun upgrade --yes dkml-base-compiler ocaml ocaml-config conf-dkml-cross-toolchain ${{ matrix.dkml-options }} $M_DKMLOPTION_32BIT; then
            printf "\n\n========= [START OF TROUBLESHOOTING] ===========\n\n" >&2
            find "$OPAMROOT"/log -mindepth 1 -maxdepth 1 -name "*.out" ! -name "log-*.out" ! -name "ocaml-variants-*.out" | while read -r dump_on_error_LOG; do
                dump_on_error_BLOG=$(basename "$dump_on_error_LOG")
                printf "\n\n========= [TROUBLESHOOTING] %s ===========\n\n" "$dump_on_error_BLOG" >&2
                cat "$dump_on_error_LOG" >&2
            done
            printf "Scroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line\n" >&2
            exit 109
          fi

      # Bundle

      - name: Distribute source code, Opam environment, and Opam root
        run: |
          #!/bin/sh
          set -eufx

          tar cCfz $OPAMROOT .ci/sd4/dist/opamroot.tar.gz --exclude ./dkml/.opam-switch/build --exclude ./log .

          tar cCfz .ci/sd4/g .ci/sd4/dist/sources.tar.gz .

          # Capture whichever opam.exe we have been using
          install -d .ci/sd4/opamexe
          printf "#!/bin/sh\ninstall -v %s .ci/sd4/opamexe/opam%s\n" '$(command -v opam)' "${EXE_EXT}" > .ci/sd4/export-opam.sh
          cat .ci/sd4/export-opam.sh >&2
          chmod +x .ci/sd4/export-opam.sh
          .ci/sd4/env-opam .ci/sd4/export-opam.sh

          # Update the tar ball with the opam executable, and possibly DLLs (especially from fdopen)
          if [ -e .ci/sd4/bs/bin ]; then
            find .ci/sd4/bs/bin -mindepth 1 -maxdepth 1 -name "Opam.Runtime.*" | while read -r runtime; do
              cp -rp $runtime .ci/sd4/opamexe/
            done
          fi
          tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/opamexe/

          # Update tar ball with MSVC environment
          if [ -e .ci/sd4/msvcenv ]; then
            tar rvf .ci/sd4/dist/env-opam.tar .ci/sd4/msvcenv
          fi

      # Upload

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: setup-dkml-${{ matrix.host_target_abis }}
          path: |
            .ci/sd4/dist/opamroot.tar.gz
            .ci/sd4/dist/sources.tar.gz
            .ci/sd4/dist/env-opam.tar
