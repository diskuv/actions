name: setup-dkml

env:
  DEFAULT_DISKUV_OPAM_REPOSITORY_TAG: "19372192396b46dc51900022a19373fc1f2188e7" # "v0.4.0-prerel19_r2" when released

on:
  workflow_call:
    inputs:
      cache-prefix:
        type: string
        description: The prefix of the cache keys.
        required: false
        default: "v1"
      ocaml:
        type: string
        description: "Git branch, tag or commit for ocaml package in the dkml-compiler repository"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      ocaml-config:
        type: string
        description: "Git branch, tag or commit for ocaml-config package in the dkml-compiler repository"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-compiler:
        type: string
        description: "Git branch, tag or commit for ocaml, ocaml-config, dkml-base-compiler and dkml-option-32bit"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      conf-dkml-cross-toolchain:
        type: string
        description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      diskuv-opam-repository:
        type: string
        description: "Git branch, tag or commit for the diskuv-opam-repository repository"
        required: false
        default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG is used as default for empty strings

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019 # 2019 has Visual Studio 2019
            dist_name: windows
            exe_ext: .exe
            bootstrap-opam-version: "0.0.0"
            # The 32-bit Opam binary has some problems with
            # `Unix.create_process` giving:
            #   "create_process" failed on sleep: Bad file descriptor
            # So use 64-bit Opam binary
            opam-abi: windows_x86 #_64
            dkml-target-abi: windows_x86
            opam-root: D:/.opam
            # vsstudio-dir: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise
            # vsstudio-vcvarsver: "14.25"
            # vsstudio-winsdkver: "10.0.18362.0"
            # vsstudio-hostarch: x86
            # vsstudio-arch: x86
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.dist_name }}

    env:
      OPAMROOT: ${{ matrix.opam-root }}

      # Increase if you get `make inconsistent assumptions over interface Stdlib__format` errors
      # or if you otherwise need a fresh Opam root
      CACHE_PREFIX: ${{ inputs.cache-prefix }}

      # When non-empty, instead of building the standard components from the
      # central Opam repository, use the github/gitlab development repositories
      # directly.
      CONF_DKML_CROSS_TOOLCHAIN:        "${{ inputs.conf-dkml-cross-toolchain }}"
      INPUT_OCAML:                      "${{ inputs.ocaml }}"
      OCAML_CONFIG:                     "${{ inputs.ocaml-config }}"
      DISKUV_OPAM_REPOSITORY:           "${{ inputs.diskuv-opam-repository }}"

      # These are not independent of dkml-compiler; they reside in same
      # repository; we cannot go over max 10 GitHub workflow inputs.
      DKML_OPTION_32BIT:                "${{ inputs.dkml-compiler }}"
      DKML_BASE_COMPILER:               "${{ inputs.dkml-compiler }}"

      # VS_DIR: ${{ matrix.vsstudio-dir }}
      # VS_ARCH: ${{ matrix.vsstudio-arch }}
      # VS_HOST_ARCH: ${{ matrix.vsstudio-hostarch }}
      # VS_VCVARSVER: ${{ matrix.vsstudio-vcvarsver }}
      # VS_WINSDKVER: ${{ matrix.vsstudio-winsdkver }}

      # Use an M_ prefix so don't interfere with any internal DKML use
      # M_DKMLOPTIONS: ${{ matrix.dkml-options }}
      M_DKMLTARGETABI: ${{ matrix.dkml-target-abi }}

    steps:
      # Install utilities
      #   tree: Nice for pretty-printing the final package tree
      #   wget: Needed for the Windows Opam download-command
      #   make: Needed for OCaml ./configure + make
      #   pkg-config: conf-pkg-config is used by many OCaml packages
      #   rsync: On Windows the `cp` fallback can fail; loosely related to
      #        https://github.com/ocaml/opam/issues/4080
      #   diffutils: Needed for diff, which is needed for Opam
      #   patch: Needed for Opam
      #   unzip: Needed for Opam
      #   git: Needed for Opam
      - name: Install MSYS2
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git

      - name: Checkout dkml-runtime-distribution (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-runtime-distribution
          path: .ci/sd4/drd
          ref: 1bf73a207e054bd60b620c863a88d7c34a0efac6

      - name: Set Visual Studio environment variables (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: pwsh
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\drd\src\windows"
          Import-Module Machine

          $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
          $CompatibleVisualStudios
          $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
          $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
          $VisualStudioProps
          echo "DKML_COMPILE_SPEC=1" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_TYPE=VS" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_DIR=$($VisualStudioProps.InstallPath)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_VCVARSVER=$($VisualStudioProps.VcVarsVer)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_WINSDKVER=$($VisualStudioProps.WinSdkVer)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_MSVSPREFERENCE=$($VisualStudioProps.MsvsPreference)" >> $env:GITHUB_ENV
          echo "DKML_COMPILE_VS_CMAKEGENERATOR=$($VisualStudioProps.CMakeGenerator)" >> $env:GITHUB_ENV

      - name: Uninstall MSYS2 conflicting executables (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: msys2 {0}
        # link.exe interferes with MSVC's link.exe
        run: rm -vf /usr/bin/link.exe

      #   Bootstrap from historical release
      - name: Cache Opam bootstrap
        if: ${{ matrix.bootstrap-opam-version != 'os' }}
        uses: actions/cache@v2
        with:
          path: bootstrap
          key:
            ${{ runner.os }}-bootstrap-${{ env.CACHE_PREFIX }}-${{ matrix.bootstrap-opam-version }}
      - name: Bootstrap Opam from historical release
        if: ${{ matrix.bootstrap-opam-version != 'os' }}
        shell: msys2 {0}
        env:
          VER: ${{ matrix.bootstrap-opam-version }}
          ABI: ${{ matrix.opam-abi }}
        run: |
          #!/bin/sh
          set -eufx
          install -d .ci/sd4/bs
          cd .ci/sd4/bs
          ABI=${ABI:-$M_DKMLTARGETABI} # default to the target abi
          if [ ! -e "ocaml-$ABI-$VER.tar.gz" ]; then
            curl -L -o ocaml-"$ABI-$VER".tmp.tar.gz "https://github.com/diskuv/dkml-installer-ocaml/releases/download/v$VER/ocaml-$ABI-$VER.tar.gz"
            mv ocaml-"$ABI-$VER".tmp.tar.gz "ocaml-$ABI-$VER.tar.gz"
            rm -f bin/opam bin/opam.exe
          fi
          if [ ! -e bin/opam ] && [ ! -e bin/opam.exe ]; then
            tar xfz "ocaml-$ABI-$VER.tar.gz" --strip-components=2
          fi

      # Build OCaml

      - name: Cache Opam root
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/config
            ${{ matrix.opam-root }}/installer-${{ env.INSTALLERNAME }}
            ${{ matrix.opam-root }}/.ci.root-init
          key:
            ${{ runner.os }}-sd4-opamroot-${{ env.CACHE_PREFIX }}-${{
              matrix.bootstrap-opam-version }}-${{ matrix.opam-abi }}-${{
              env.DEFAULT_DISKUV_OPAM_REPOSITORY_TAG }}-${{ env.CACHE_KEY_GITHUB_INPUTS }}

      - name: Initialize Opam root
        env:
          ISWINDOWS: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: msys2 {0}
        # Complicated Opam sequence is because:
        # 1. Opam's default curl does not work on Windows,
        #    and `opam init` does not provide a way to change it (TODO: need
        #    a PR!).
        # 2. We have to separate the Opam download cache from the other Opam
        #    caches
        run: |
          #!/bin/sh
          set -eufx

          # empty opam repository
          install -d "$GITHUB_WORKSPACE"/.ci/sd4/eor
          cat > "$GITHUB_WORKSPACE"/.ci/sd4/eor/repo <<EOF
          opam-version: "2.0"
          browse: "https://opam.ocaml.org/pkg/"
          upstream: "https://github.com/ocaml/opam-repository/tree/master/"
          EOF

          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          if [ ! -e "$OPAMROOT/.ci.root-init" ]; then
            rm -rf "$OPAMROOT" # Clear any partial previous attempt
            if [ "$ISWINDOWS" = true ]; then
              eor=$(cygpath -am "$GITHUB_WORKSPACE"/.ci/sd4/eor)
              opam init --disable-sandboxing --no-setup --kind local --bare "$eor"
              opam option --yes --global download-command=wget
            else
              opam init --disable-sandboxing --no-setup --kind local --bare "$GITHUB_WORKSPACE/.ci/sd4/eor"
            fi
            touch "$OPAMROOT/.ci.root-init"
          fi
          opam var --global || true

      - name: Cache Opam downloads and repositories
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/repo
            ${{ matrix.opam-root }}/download-cache
            ${{ matrix.opam-root }}/.ci.repo-init
          key:
            ${{ runner.os }}-sd4-opamrepo-${{ env.CACHE_PREFIX }}

      # The action/checkout steps used for pinning will re-use existing Git objects
      # because of caching
      - name: Cache Git checkouts of Opam pins
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/.ci/sd4/g
          key:
            ${{ runner.os }}-sd4-git-${{ env.CACHE_PREFIX }}

      - name: Setup Opam repositories
        shell: msys2 {0}
        run: |
          #!/bin/sh
          set -eufx
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          if [ ! -e "$OPAMROOT/.ci.repo-init" ]; then
            opam repository remove default --yes --all --dont-select || true
            opam repository remove diskuv --yes --all --dont-select || true
            opam repository add default https://opam.ocaml.org --yes --dont-select
            opam repository add diskuv "git+https://github.com/diskuv/diskuv-opam-repository.git#${DISKUV_OPAM_REPOSITORY:-$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG}" --yes --dont-select
            touch "$OPAMROOT/.ci.repo-init"
          fi

      - name: Create Opam switch
        shell: msys2 {0}
        run: |
          #!/bin/sh
          set -eufx
          ls -l $OPAMROOT
          [ -d "$OPAMROOT/dkml/.opam-switch" ] || PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam switch create dkml --repos diskuv,default --empty

      # dkml-base-compiler

      - name: Checkout dkml-base-compiler
        if: ${{ env.DKML_BASE_COMPILER != '@repository@' }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/g/dkml-base-compiler
          ref: ${{ env.DKML_BASE_COMPILER }} # empty is no `ref`, which is default branch

      - name: Pin dkml-base-compiler to checkout instead of Opam repository
        if: ${{ env.DKML_BASE_COMPILER != '@repository@' }}
        shell: msys2 {0}
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action dkml-base-compiler .ci/g/dkml-base-compiler

      # conf-dkml-cross-toolchain

      - name: Checkout conf-dkml-cross-toolchain
        if: ${{ env.CONF_DKML_CROSS_TOOLCHAIN != '@repository@' }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/conf-dkml-cross-toolchain
          path: .ci/g/conf-dkml-cross-toolchain
          ref: ${{ env.CONF_DKML_CROSS_TOOLCHAIN }} # empty is no `ref`, which is default branch

      - name: Pin conf-dkml-cross-toolchain to checkout instead of Opam repository
        if: ${{ env.CONF_DKML_CROSS_TOOLCHAIN != '@repository@' }}
        shell: msys2 {0}
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action conf-dkml-cross-toolchain .ci/g/conf-dkml-cross-toolchain

      # ocaml

      - name: Checkout ocaml
        if: ${{ env.INPUT_OCAML != '@repository@' }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/g/ocaml
          ref: ${{ env.INPUT_OCAML }} # empty is no `ref`, which is default branch

      - name: Pin ocaml.4.12.1 to checkout instead of Opam repository
        if: ${{ env.INPUT_OCAML != '@repository@' }}
        shell: msys2 {0}
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action ocaml.4.12.1 .ci/g/ocaml

      # ocaml-config

      - name: Checkout ocaml-config
        if: ${{ env.OCAML_CONFIG != '@repository@' }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/g/ocaml-config
          ref: ${{ env.OCAML_CONFIG }} # empty is no `ref`, which is default branch

      - name: Pin ocaml-config.2 to checkout instead of Opam repository
        if: ${{ env.OCAML_CONFIG != '@repository@' }}
        shell: msys2 {0}
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action ocaml-config.2 .ci/g/ocaml-config

      # dkml-option-32bit

      - name: Checkout dkml-option-32bit
        if: ${{ env.DKML_OPTION_32BIT != '@repository@' }}
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/g/dkml-option-32bit
          ref: ${{ env.DKML_OPTION_32BIT }} # empty is no `ref`, which is default branch

      - name: Pin dkml-option-32bit to checkout instead of Opam repository
        if: ${{ env.DKML_OPTION_32BIT != '@repository@' }}
        shell: msys2 {0}
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action dkml-option-32bit .ci/g/dkml-option-32bit

      # Bundle

      - name: Bundle Opam (Windows)
        if: ${{ startsWith(matrix.dist_name, 'windows') }}
        shell: msys2 {0}
        env:
          DISTNAME: ${{ matrix.dist_name }}
          EXE_EXT: ${{ matrix.exe_ext }}
        run: |
          #!/bin/sh
          set -eufx
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          install -d .ci/sd4/dist
          tree -F $(opam var prefix)
          tar cvCfz $(opam var prefix) $GITHUB_WORKSPACE/.ci/sd4/dist/$DISTNAME.tar.gz .
          install $GITHUB_WORKSPACE/.ci/sd4/bs/bin/opam$EXE_EXT $GITHUB_WORKSPACE/.ci/sd4/dist/opam-$DISTNAME${EXE_EXT}

      # Upload

      - uses: actions/upload-artifact@v3
        with:
          name: setup-dkml-${{ matrix.dist_name }}
          path: |
            .ci/sd4/dist/${{ matrix.dist_name }}.tar.gz
            .ci/sd4/dist/opam-${{ matrix.dist_name }}${{ matrix.exe_ext }}
