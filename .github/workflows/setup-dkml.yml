name: setup-dkml

env:
  DEFAULT_DISKUV_OPAM_REPOSITORY_TAG: "19372192396b46dc51900022a19373fc1f2188e7" # "v0.4.0-prerel19_r2" when released
  PIN_OCAMLFIND: "1.9.1"
  PIN_OCAMLBUILD: "0.14.0"

on:
  workflow_call:
    inputs:
      use-fdopen-opam:
        type: boolean
        description: "Use opam.exe from fdopen. Typically only used when bootstrapping Opam for the first time"
        required: false
        default: false
      cache-prefix:
        type: string
        description: The prefix of the cache keys.
        required: false
        default: "v1"
      ocaml:
        type: string
        description: "Git branch, tag or commit for ocaml package in the dkml-compiler repository"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      ocaml-config:
        type: string
        description: "Git branch, tag or commit for ocaml-config package in the dkml-compiler repository"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-compiler:
        type: string
        description: "Git branch, tag or commit for ocaml, ocaml-config, dkml-base-compiler and dkml-option-32bit"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      conf-dkml-cross-toolchain:
        type: string
        description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      diskuv-opam-repository:
        type: string
        description: "Git branch, tag or commit for the diskuv-opam-repository repository"
        required: false
        default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG is used as default for empty strings

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # bootstrap-opam-version
        #   We need an old working Opam; see BOOTSTRAPPING.md of dkml-installer repository.
        #   We use https://github.com/diskuv/dkml-installer-ocaml/releases
        #   to get an old one; you specify its version number here.
        #   Special value of 'os' means use the OS's package manager
        #   (yum/apt/brew).
        # opam-root
        #   We need a stable location for OPAMROOT even if the version of Opam
        #   changes (there are two versions: bootstrap and the compiled one).
        # vsstudio-hostarch
        #   Only needed if `os: windows-*`. The ARCH in
        #   `vsdevcmd.bat -host_arch=ARCH`. Example: x64.
        #   If you have a 64-bit Intel machine you should not use x86 because
        #   _WIN64 will be defined (see https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170)
        #   which is based on the host machine architecture (unless you explicitly
        #   cross-compile with different ARCHs; that is, -host_arch=x64 -arch=x75).
        #   Confer: https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#use-the-developer-tools-in-an-existing-command-window
        #   If you see ppx problems with missing _BitScanForward64 then
        #   https://github.com/janestreet/base/blob/8993e35ba2e83e5020b2deb548253ef1e4a699d4/src/int_math_stubs.c#L25-L32
        #   has been compiled with the wrong host architecture.
        # vsstudio-arch
        #   Only needed if `os: windows-*`. The ARCH in
        #   `vsdevcmd.bat -arch=ARCH`. Example: x86.
        #   Confer: https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#use-the-developer-tools-in-an-existing-command-window
        # dkml-options:
        #   Space separated list of `dkml-option-*` packages.
        #
        #   Use 32-bit installers when possible for maximum portability of
        #   OCaml bytecode. macos is only the major platform without 32-bit.
        #   You don't need to include `dkml-option-32bit` because it is auto
        #   chosen when the target ABI ends with x86.
        include:
          # ------------
          # windows-2019
          #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
          # ------------

          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86
            default_shell: msys2 {0}
            exe_ext: .exe
            bootstrap-opam-version: "0.0.0"
            # The 32-bit Opam binary has some problems with
            # `Unix.create_process` giving:
            #   "create_process" failed on sleep: Bad file descriptor
            # So use 64-bit Opam binary?
            opam-abi: windows_x86 # _64
            dkml-host-abi: windows_x86
            opam-root: D:/.opam
            vsstudio-hostarch: x64
            vsstudio-arch: x86
          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86_64
            default_shell: msys2 {0}
            exe_ext: .exe
            bootstrap-opam-version: "0.0.0"
            opam-abi: windows_x86_64
            dkml-host-abi: windows_x86_64
            opam-root: D:/.opam
            vsstudio-hostarch: x64
            vsstudio-arch: x64
          # Unnecessary to use VS 14.16, but it serves as a good template for
          # other (future) VS versions.
          # - os: windows-2019 # 2019 has Visual Studio 2019
          #   host_target_abis: win32_1416-windows_64 # VS2017 compiler available to VS2019
          #   default_shell: msys2 {0}
          #   exe_ext: .exe
          #   bootstrap-opam-version: "0.0.0"
          #   opam-abi: windows_x86_64
          #   dkml-host-abi: windows_x86_64
          #   opam-root: D:/.opam
          #   vsstudio-hostarch: x64
          #   vsstudio-arch: x64
          #   vsstudio-dir: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
          #   vsstudio-vcvarsver: '14.16'
          #   vsstudio-winsdkver: '10.0.18362.0'
          #   vsstudio-msvspreference: 'VS16.5'
          #   vsstudio-cmakegenerator: 'Visual Studio 16 2019'

          # ------------
          # windows-2022
          #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
          # ------------

          # Disabled because haven't done opam log dumps on failure for
          # `opam upgrade`. See https://github.com/diskuv/dkml-component-ocamlcompiler/runs/6059642542?check_suite_focus=true
          # - os: windows-2022
          #   host_target_abis: win32_2022-windows_x86_64
          #   default_shell: msys2 {0}
          #   exe_ext: .exe
          #   bootstrap-opam-version: "0.0.0"
          #   opam-abi: windows_x86_64
          #   dkml-host-abi: windows_x86_64
          #   opam-root: D:/.opam
          #   vsstudio-hostarch: x64
          #   vsstudio-arch: x64
          #   vsstudio-dir: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
          #   vsstudio-vcvarsver: '14.29'
          #   vsstudio-winsdkver: '10.0.20348.0'
          #   vsstudio-msvspreference: 'VS16.11'
          #   vsstudio-cmakegenerator: 'Visual Studio 17 2022'

          - os: macos-latest
            host_target_abis: macos-darwin_all
            default_shell: sh
            bootstrap-opam-version: "os"
            dkml-host-abi: darwin_x86_64
            opam-root: /Users/runner/.opam

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.host_target_abis }}

    defaults:
      run:
        shell: ${{ matrix.default_shell }}

    env:
      OPAMROOT: ${{ matrix.opam-root }}
      EXE_EXT: ${{ matrix.exe_ext }}

      # Increase _rN_ if you get `make inconsistent assumptions over interface Stdlib__format` errors
      # or if you otherwise need a fresh Opam root
      OPAM_BINARY_CACHE_KEY: r5_${{
        inputs.use-fdopen-opam }}_${{
        matrix.dkml-host-abi }}_${{
        matrix.opam-abi }}_${{
        matrix.bootstrap-opam-version }}

      # When non-empty, instead of building the standard components from the
      # central Opam repository, use the github/gitlab development repositories
      # directly.
      CONF_DKML_CROSS_TOOLCHAIN:        "${{ inputs.conf-dkml-cross-toolchain }}"
      INPUT_OCAML:                      "${{ inputs.ocaml }}"
      OCAML_CONFIG:                     "${{ inputs.ocaml-config }}"
      DISKUV_OPAM_REPOSITORY:           "${{ inputs.diskuv-opam-repository }}"

      # These are not independent of dkml-compiler; they reside in same
      # repository; we cannot go over max 10 GitHub workflow inputs.
      DKML_OPTION_32BIT:                "${{ inputs.dkml-compiler }}"
      DKML_BASE_COMPILER:               "${{ inputs.dkml-compiler }}"

      VS_ARCH: ${{ matrix.vsstudio-arch }}
      VS_HOST_ARCH: ${{ matrix.vsstudio-hostarch }}

      # Use an M_ prefix so don't interfere with any internal DKML use
      M_DKMLOPTIONS: ${{ matrix.dkml-options }}
      M_DKMLHOSTABI: ${{ matrix.dkml-host-abi }}

      # `>-` will flatten the multiple lines into a single line with no trailing EOL.
      # By design `populate-cache` is not part of the cache key
      CACHE_KEY_GITHUB_INPUTS: >-
        INPUT_OCAML=${{ inputs.ocaml }}
        OCAML_CONFIG=${{ inputs.ocaml-config }}
        DISKUV_OPAM_REPOSITORY=${{ inputs.diskuv-opam-repository }}
        ALL_COMPILER=${{ inputs.dkml-compiler }}
        CONF_DKML_CROSS_TOOLCHAIN=${{ inputs.conf-dkml-cross-toolchain }}

    steps:
      # Install utilities
      #   tree: Nice for pretty-printing the final package tree
      #   wget: Needed for the Windows Opam download-command
      #   make: Needed for OCaml ./configure + make
      #   pkg-config: conf-pkg-config is used by many OCaml packages
      #   rsync: On Windows the `cp` fallback can fail; loosely related to
      #        https://github.com/ocaml/opam/issues/4080
      #   diffutils: Needed for diff, which is needed for Opam
      #   patch: Needed for Opam
      #   unzip: Needed for Opam
      #   git: Needed for Opam
      - name: Install MSYS2
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          # 1. For Opam 2.0 from fdopen we need MSYS2/Cygwin tar that can handle
          #    Unix paths like /tmp.
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git
            tar

      - name: Uninstall MSYS2 conflicting executables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: msys2 {0}
        # link.exe interferes with MSVC's link.exe
        run: rm -vf /usr/bin/link.exe

      - name: Checkout dkml-runtime-distribution (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-runtime-distribution
          path: .ci/sd4/drd
          ref: 1bf73a207e054bd60b620c863a88d7c34a0efac6

      #   Bootstrap from historical release
      - name: Cache Opam bootstrap by OS
        if: matrix.bootstrap-opam-version != 'os'
        uses: actions/cache@v2
        with:
          path: .ci/sd4/bs
          key:
            ${{ inputs.cache-prefix }}_${{ runner.os }}-sd4-bs-${{ env.OPAM_BINARY_CACHE_KEY }}
      - name: Bootstrap Opam from fdopen (Windows)
        if: inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')
        shell: msys2 {0}
        run: |
          #!/bin/sh
          set -eufx

          install -d "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin
          wget -O "$GITHUB_WORKSPACE"/.ci/sd4/opam64.tar.xz https://github.com/fdopen/opam-repository-mingw/releases/download/0.0.0.2/opam64.tar.xz

          # this stalls: tar xvCfJ "$GITHUB_WORKSPACE"/.ci/sd4 "$GITHUB_WORKSPACE"/.ci/sd4/opam64.tar.xz
          xz -v -d "$GITHUB_WORKSPACE"/.ci/sd4/opam64.tar.xz
          tar xvCf .ci/sd4 .ci/sd4/opam64.tar

          mv -v "$GITHUB_WORKSPACE"/.ci/sd4/opam64/bin/opam.exe            "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/
          mv -v "$GITHUB_WORKSPACE"/.ci/sd4/opam64/bin/opam-installer.exe  "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/
          rm -rf "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/Opam.Runtime.amd64
          mv -v "$GITHUB_WORKSPACE"/.ci/sd4/opam64/bin/Opam.Runtime.amd64/ "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/
          ldd "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/opam.exe
          ldd "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/opam-installer.exe
      - name: Bootstrap Opam from historical release (non-Windows; Windows non-fdopen)
        if: "!(inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')) && matrix.bootstrap-opam-version != 'os'"
        env:
          VER: ${{ matrix.bootstrap-opam-version }}
          ABI: ${{ matrix.opam-abi }}
        run: |
          #!/bin/sh
          set -eufx
          install -d .ci/sd4/bs
          cd .ci/sd4/bs
          ABI=${ABI:-$M_DKMLHOSTABI} # default to the target abi
          if [ ! -e "ocaml-$ABI-$VER.tar.gz" ]; then
            curl -L -o ocaml-"$ABI-$VER".tmp.tar.gz "https://github.com/diskuv/dkml-installer-ocaml/releases/download/v$VER/ocaml-$ABI-$VER.tar.gz"
            mv ocaml-"$ABI-$VER".tmp.tar.gz "ocaml-$ABI-$VER.tar.gz"
            rm -f bin/opam bin/opam.exe
          fi
          if [ ! -e bin/opam ] && [ ! -e bin/opam.exe ]; then
            tar xfz "ocaml-$ABI-$VER.tar.gz" --strip-components=2
          fi

      #   Bootstrap from package manager
      - name: Bootstrap Opam from package manager (macOS)
        if: startsWith(matrix.dkml-host-abi, 'darwin') && matrix.bootstrap-opam-version == 'os'
        run: brew install gpatch && brew install opam

      # Build OCaml

      - name: Cache Opam root by (host,target)
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/config
            ${{ matrix.opam-root }}/installer-${{ env.INSTALLERNAME }}
            ${{ matrix.opam-root }}/.ci.root-init
          key:
            ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-opamroot-${{ env.OPAM_BINARY_CACHE_KEY }}

      - name: Initialize Opam root
        env:
          ISWINDOWS: ${{ startsWith(matrix.dkml-host-abi, 'windows') }}
        # Complicated Opam sequence is because:
        # 1. Opam's default curl does not work on Windows,
        #    and `opam init` does not provide a way to change it (TODO: need
        #    a PR!).
        # 2. We have to separate the Opam download cache from the other Opam
        #    caches
        run: |
          #!/bin/sh
          set -eufx

          # empty opam repository
          install -d "$GITHUB_WORKSPACE"/.ci/sd4/eor
          cat > "$GITHUB_WORKSPACE"/.ci/sd4/eor/repo <<EOF
          opam-version: "2.0"
          browse: "https://opam.ocaml.org/pkg/"
          upstream: "https://github.com/ocaml/opam-repository/tree/master/"
          EOF

          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          if [ ! -e "$OPAMROOT/.ci.root-init" ]; then
            rm -rf "$OPAMROOT" # Clear any partial previous attempt
            if [ "$ISWINDOWS" = true ]; then
              eor=$(cygpath -am "$GITHUB_WORKSPACE"/.ci/sd4/eor)
              opam init --disable-sandboxing --no-setup --kind local --bare "$eor"
              case "$(opam --version)" in
                2.0.*) echo 'download-command: wget' >> $OPAMROOT/config ;;
                *)     opam option --yes --global download-command=wget
              esac
            else
              opam init --disable-sandboxing --no-setup --kind local --bare "$GITHUB_WORKSPACE/.ci/sd4/eor"
            fi
            touch "$OPAMROOT/.ci.root-init"
          fi
          opam var --global || true

      - name: Cache Opam downloads and repositories by (host,target)
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/repo
            ${{ matrix.opam-root }}/download-cache
            ${{ matrix.opam-root }}/.ci.repo-init
          key:
            ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-opamrepo-${{
              env.OPAM_BINARY_CACHE_KEY }}-${{
              inputs.diskuv-opam-repository }}-${{
              env.DEFAULT_DISKUV_OPAM_REPOSITORY_TAG }}-${{
              env.CACHE_KEY_GITHUB_INPUTS }}

      - name: Setup Opam repositories
        run: |
          #!/bin/sh
          set -eufx
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          if [ -x /usr/bin/cygpath ]; then
            export TEMP=$(cygpath -am "$RUNNER_TEMP")
          fi
          if [ ! -e "$OPAMROOT/.ci.repo-init" ]; then
            opam repository remove default --yes --all --dont-select || true
            opam repository remove diskuv --yes --all --dont-select || true
            opam repository add default https://opam.ocaml.org --yes --dont-select
            opam repository add diskuv "git+https://github.com/diskuv/diskuv-opam-repository.git#${DISKUV_OPAM_REPOSITORY:-$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG}" --yes --dont-select
            touch "$OPAMROOT/.ci.repo-init"
          fi

      - name: Cache Opam compiler switch by (host,target)
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.opam-root }}/dkml
            ${{ matrix.opam-root }}/config
          key:
            ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-switch-${{
              env.OPAM_BINARY_CACHE_KEY }}-${{
              inputs.diskuv-opam-repository }}-${{
              env.DEFAULT_DISKUV_OPAM_REPOSITORY_TAG }}-${{
              env.CACHE_KEY_GITHUB_INPUTS }}

      # Create, or recreate, the Opam switch. The Opam switch should not be
      # cached except for the compiler (confer docs for setup-ocaml GitHub
      # Action). When we initially create the switch and then GitHub loads the
      # cache of the Opam root,
      # the switch will be present in OPAMROOT/config but OPAMROOT/<switch>
      # will not be present ... recreating the switch to fix the inconsistent
      # state.
      - name: Create Opam switch (TODO - missing fdopen repository) (TODO - missing 1000+ dkml pins)
        run: |
          #!/bin/sh
          set -eufx
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          cat $OPAMROOT/config
          if ! opam switch list --short | grep '^dkml$'; then opam switch create dkml --repos diskuv,default --empty --yes; fi

      # The action/checkout steps used for pinning will re-use existing Git objects
      # because of caching
      - name: Cache Git checkouts of Opam pins by OS
        uses: actions/cache@v2
        with:
          path: .ci/sd4/g
          key:
            ${{ inputs.cache-prefix }}_${{ runner.os }}-sd4-git

      # dkml-base-compiler

      - name: Checkout dkml-base-compiler
        if: env.DKML_BASE_COMPILER != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/dkml-base-compiler
          ref: ${{ env.DKML_BASE_COMPILER }} # empty is no `ref`, which is default branch

      - name: Pin dkml-base-compiler to checkout instead of Opam repository
        if: env.DKML_BASE_COMPILER != '@repository@'
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action dkml-base-compiler .ci/sd4/g/dkml-base-compiler

      # conf-dkml-cross-toolchain

      - name: Checkout conf-dkml-cross-toolchain
        if: env.CONF_DKML_CROSS_TOOLCHAIN != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/conf-dkml-cross-toolchain
          path: .ci/sd4/g/conf-dkml-cross-toolchain
          ref: ${{ env.CONF_DKML_CROSS_TOOLCHAIN }} # empty is no `ref`, which is default branch

      - name: Pin conf-dkml-cross-toolchain to checkout instead of Opam repository
        if: env.CONF_DKML_CROSS_TOOLCHAIN != '@repository@'
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action conf-dkml-cross-toolchain .ci/sd4/g/conf-dkml-cross-toolchain

      # ocaml

      - name: Checkout ocaml
        if: env.INPUT_OCAML != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/ocaml
          ref: ${{ env.INPUT_OCAML }} # empty is no `ref`, which is default branch

      - name: Pin ocaml.4.12.1 to checkout instead of Opam repository
        if: env.INPUT_OCAML != '@repository@'
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action ocaml.4.12.1 .ci/sd4/g/ocaml

      # ocaml-config

      - name: Checkout ocaml-config
        if: env.OCAML_CONFIG != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/ocaml-config
          ref: ${{ env.OCAML_CONFIG }} # empty is no `ref`, which is default branch

      - name: Pin ocaml-config.2 to checkout instead of Opam repository
        if: env.OCAML_CONFIG != '@repository@'
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action ocaml-config.2 .ci/sd4/g/ocaml-config

      # dkml-option-32bit

      - name: Checkout dkml-option-32bit
        if: env.DKML_OPTION_32BIT != '@repository@'
        uses: actions/checkout@v2
        with:
          repository: diskuv/dkml-compiler
          path: .ci/sd4/g/dkml-option-32bit
          ref: ${{ env.DKML_OPTION_32BIT }} # empty is no `ref`, which is default branch

      - name: Pin dkml-option-32bit to checkout instead of Opam repository
        if: env.DKML_OPTION_32BIT != '@repository@'
        run: PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH" opam pin add --yes --no-action dkml-option-32bit .ci/sd4/g/dkml-option-32bit

      # ocamlfind and ocamlbuild have patches necessary for Windows in diskuv-opam-repository

      - name: Pin ocamlfind ${{ env.PIN_OCAMLFIND }}, ocamlbuild ${{ env.PIN_OCAMLBUILD }}
        run: |
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          opam pin add --yes --no-action -k version ocamlfind ${{ env.PIN_OCAMLFIND }}
          opam pin add --yes --no-action -k version ocamlbuild ${{ env.PIN_OCAMLBUILD }}

      # Setup C compiler

      - name: Cache Visual Studio environment variables by (host,target)
        uses: actions/cache@v2
        with:
          path: .ci/sd4/vsenv
          key: ${{ inputs.cache-prefix }}_${{ matrix.host_target_abis }}-sd4-vsenv_1-${{ env.VS_ARCH }}-${{ env.VS_HOST_ARCH }}

      - name: Diagnose Visual Studio environment variables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: pwsh
        run: |
          if (Test-Path -Path "C:\Program Files (x86)\Windows Kits\10\include") {
            dir "C:\Program Files (x86)\Windows Kits\10\include"
          }
          if (Test-Path -Path "C:\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsDesktop") {
            dir "C:\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsDesktop"
          }

          $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\drd\src\windows"
          Import-Module Machine

          $allinstances = Get-VSSetupInstance
          $allinstances | ConvertTo-Json -Depth 5

      - name: Query Visual Studio environment variables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows') && matrix.vsstudio-dir == ''
        shell: pwsh
        run: |
          if (!(Test-Path -Path ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv)) {
            $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\drd\src\windows"
            Import-Module Machine

            $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
            $CompatibleVisualStudios
            $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
            $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
            $VisualStudioProps

            echo "VS_DIR=$($VisualStudioProps.InstallPath)" > ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_VCVARSVER=$($VisualStudioProps.VcVarsVer)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_WINSDKVER=$($VisualStudioProps.WinSdkVer)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_MSVSPREFERENCE=$($VisualStudioProps.MsvsPreference)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_CMAKEGENERATOR=$($VisualStudioProps.CMakeGenerator)" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            # The following looks redundant, but caller workflows also need these env variables!
            echo "VS_ARCH=${env:VS_ARCH}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
            echo "VS_HOST_ARCH=${env:VS_HOST_ARCH}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          }

      - name: Save Visual Studio environment variables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows') && matrix.vsstudio-dir != ''
        shell: pwsh
        run: |
          echo "VS_DIR=${{ matrix.vsstudio-dir }}" > ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_VCVARSVER=${{ matrix.vsstudio-vcvarsver }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_WINSDKVER=${{ matrix.vsstudio-winsdkver }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_MSVSPREFERENCE=${{ matrix.vsstudio-msvspreference }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_CMAKEGENERATOR=${{ matrix.vsstudio-cmakegenerator }}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          # The following looks redundant, but caller workflows also need these env variables!
          echo "VS_ARCH=${env:VS_ARCH}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          echo "VS_HOST_ARCH=${env:VS_HOST_ARCH}" >> ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv

      - name: Export Visual Studio environment variables (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: pwsh
        run: |
          Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv
          Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv >> $env:GITHUB_ENV

      - name: Use Visual Studio in dkml-* Opam packages (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        run: |
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"

          # Make the standard input work as an OCaml string.
          # This currently only escapes backslashes and double quotes.
          escape_arg_as_ocaml_string() {
              escape_arg_as_ocaml_string_ARG=$1
              shift
              printf "%s" "$escape_arg_as_ocaml_string_ARG" | sed 's#\\#\\\\#g; s#"#\\"#g;'
          }
          E_VS_DIR=$(escape_arg_as_ocaml_string "$VS_DIR")
          E_VS_VCVARSVER=$(escape_arg_as_ocaml_string "$VS_VCVARSVER")
          E_VS_WINSDKVER=$(escape_arg_as_ocaml_string "$VS_WINSDKVER")
          E_VS_MSVSPREFERENCE=$(escape_arg_as_ocaml_string "$VS_MSVSPREFERENCE")
          E_VS_CMAKEGENERATOR=$(escape_arg_as_ocaml_string "$VS_CMAKEGENERATOR")

          case "$(opam --version)" in
            2.0.*)
              OP=$(opam var prefix)
              OPSC=$OP/.opam-switch/switch-config
              if grep setenv: $OPSC; then
                echo "INFO: Updating switch-config. Old was:"
                awk '{print ">> " $0}' $OPSC

                awk '$1=="setenv:"{x=1} x==0{print} x==1 && $0=="]"{x=0}' $OPSC > $OPSC.trimmed
                mv $OPSC.trimmed $OPSC
              fi
              echo 'setenv: [' >> $OPSC
              echo '  [DKML_COMPILE_SPEC = "1"]' >> $OPSC
              echo '  [DKML_COMPILE_TYPE = "VS"]' >> $OPSC
              echo "  [DKML_COMPILE_VS_DIR = \"$E_VS_DIR\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\"]" >> $OPSC
              echo "  [DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\"]" >> $OPSC
              echo "  [DKML_HOST_ABI = \"$M_DKMLHOSTABI\"]" >> $OPSC
              echo ']' >> $OPSC
              cat $OPSC # print
              ;;
            *)
              opam option setenv= # reset
              opam option setenv+='DKML_COMPILE_SPEC = "1"'
              opam option setenv+='DKML_COMPILE_TYPE = "VS"'
              opam option setenv+="DKML_COMPILE_VS_DIR = \"$E_VS_DIR\""
              opam option setenv+="DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\""
              opam option setenv+="DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\""
              opam option setenv+="DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\""
              opam option setenv+="DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\""
              opam option setenv+="DKML_HOST_ABI = \"$M_DKMLHOSTABI\""
              opam option setenv # print
              ;;
          esac

      - name: Capture Opam environment (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        run: |
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"

          # convert to DOS 'SET varname=varvalue' format if not already
          opam env > "$GITHUB_WORKSPACE"/.ci/sd4/opamenv
          if grep -q '; export' "$GITHUB_WORKSPACE"/.ci/sd4/opamenv; then
            opam env | grep -v '^PATH=' | sed "s#; export.*##; s#'##g; s#^#SET #; s#\\\\\\\\#\\\\#g" > "$GITHUB_WORKSPACE"/.ci/sd4/opamenv
          fi
          cat "$GITHUB_WORKSPACE"/.ci/sd4/opamenv

      - name: Capture Opam environment (non-Windows)
        if: "!startsWith(matrix.dkml-host-abi, 'windows')"
        run: |
          PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"
          opam env > "$GITHUB_WORKSPACE"/.ci/sd4/opamenv
          cat "$GITHUB_WORKSPACE"/.ci/sd4/opamenv

      # Setup OCaml compiler

      - name: Install OCaml compiler (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        shell: cmd
        run: |
          @echo OFF

          REM OCaml (dkml-base-compiler) will compile fine but any other
          REM packages (ocamlbuild, etc.) which
          REM need a native compiler will fail without the MSVC compiler in the
          REM PATH. There isn't a `with-dkml.exe` alternative available at
          REM this stage of the GitHub workflow.
          call "%VS_DIR%\Common7\Tools\VsDevCmd.bat" -no_logo -host_arch=%VS_HOST_ARCH% -arch=%VS_ARCH% -vcvars_ver=%VS_VCVARSVER% -winsdk=%VS_WINSDKVER%
          if %ERRORLEVEL% neq 0 (
            echo.
            echo.The "%VS_DIR%\Common7\Tools\VsDevCmd.bat" command failed
            echo.with exit code %ERRORLEVEL%.
            echo.
            exit /b %ERRORLEVEL%
          )

          REM VsDevCmd.bat turns off echo; be explicit if we want it on or off
          @echo OFF

          if "%SHOULD_POPULATE_CACHE%" == "true" (
            if "%CAN_DOWNLOAD_ONLY%" == "true" (
              set MOREARGS=--download-only
              set ENVARGS=OPAMDOWNLOADJOBS=1
            )
          )
          if "%M_DKMLHOSTABI:~-4%" == "_x86" (
            set M_DKMLOPTION_32BIT=dkml-option-32bit
          )

          REM Place Opam in PATH.
          set PATH=%GITHUB_WORKSPACE%\.ci\sd4\bs\bin;%PATH%

          REM We must place MSYS2 in front of path so that MSYS2
          REM tar.exe is used instead of Windows tar.exe.
          REM But setup-msys2 puts MSYS2 in a temp directory when release=false.
          REM So we use setup-msys2's `msys2 -c` wrapper.
          FOR /F "tokens=* usebackq" %%F IN (`msys2 -c "cygpath -aw /usr/bin"`) DO (
            set "MSYS2BIN=%%F"
          )
          set PATH=%MSYS2BIN%;%PATH%

          if "%__INTERNAL__WIN32_BASH_HOOK%" == "true" (
            REM # for debugging
            env %ENVARGS% bash
          )
          env %ENVARGS% opam upgrade --yes dkml-base-compiler ocaml ocaml-config conf-dkml-cross-toolchain %M_DKMLOPTIONS% %M_DKMLOPTION_32BIT% %MOREARGS%

      - name: Install OCaml compiler (non-Windows)
        if: "!startsWith(matrix.dkml-host-abi, 'windows')"
        run: |
          # Place Opam, if not bootstrapped by a package manager, at start of PATH
          export PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"

          opam upgrade --yes dkml-base-compiler ocaml ocaml-config conf-dkml-cross-toolchain $M_DKMLOPTIONS $M_DKMLOPTION_32BIT

      # Bundle

      - name: Distribute source code, Opam executable, Opam root
        run: |
          #!/bin/sh
          set -eufx

          # Place Opam, if not bootstrapped by a package manager, at start of PATH
          export PATH="$GITHUB_WORKSPACE/.ci/sd4/bs/bin:$PATH"

          install -d "$GITHUB_WORKSPACE"/.ci/sd4/dist

          tar cvCfz $OPAMROOT .ci/sd4/dist/opamroot.tar.gz --exclude ./dkml/.opam-switch/build --exclude ./log .

          tar cvCfz .ci/sd4/g .ci/sd4/dist/sources.tar.gz .

          install -v "$GITHUB_WORKSPACE"/.ci/sd4/opamenv "$GITHUB_WORKSPACE"/.ci/sd4/dist/opamenv

          # Distribute whichever opam.exe we have been using
          install -v $(command -v opam) "$GITHUB_WORKSPACE"/.ci/sd4/dist/opam${EXE_EXT}

      - name: Distribute Visual Studio environment (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        run: install -v "$GITHUB_WORKSPACE"/.ci/sd4/vsenv   "$GITHUB_WORKSPACE"/.ci/sd4/dist/vsenv

      - name: Distribute Opam DLLs (Windows fdopen)
        if: inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')
        run: cp -rpv "$GITHUB_WORKSPACE"/.ci/sd4/bs/bin/Opam.Runtime.amd64 "$GITHUB_WORKSPACE"/.ci/sd4/dist/

      # Upload

      - name: Upload (Windows fdopen)
        uses: actions/upload-artifact@v3
        if: inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')
        with:
          name: setup-dkml-${{ matrix.host_target_abis }}
          path: |
            .ci/sd4/dist/opamroot.tar.gz
            .ci/sd4/dist/opam${{ matrix.exe_ext }}
            .ci/sd4/dist/Opam.Runtime.amd64
            .ci/sd4/dist/sources.tar.gz
            .ci/sd4/dist/vsenv
            .ci/sd4/dist/opamenv

      - name: Upload (Windows non-fdopen)
        uses: actions/upload-artifact@v3
        if: "!inputs.use-fdopen-opam && startsWith(matrix.dkml-host-abi, 'windows')"
        with:
          name: setup-dkml-${{ matrix.host_target_abis }}
          path: |
            .ci/sd4/dist/opamroot.tar.gz
            .ci/sd4/dist/opam${{ matrix.exe_ext }}
            .ci/sd4/dist/sources.tar.gz
            .ci/sd4/dist/vsenv
            .ci/sd4/dist/opamenv

      - name: Upload (non-Windows)
        uses: actions/upload-artifact@v3
        if: "!startsWith(matrix.dkml-host-abi, 'windows')"
        with:
          name: setup-dkml-${{ matrix.host_target_abis }}
          path: |
            .ci/sd4/dist/opamroot.tar.gz
            .ci/sd4/dist/opam${{ matrix.exe_ext }}
            .ci/sd4/dist/sources.tar.gz
            .ci/sd4/dist/opamenv
